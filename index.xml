<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typical personal blog</title>
    <link>https://benetis.me/index.xml</link>
    <description>Recent content on Typical personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Wed, 10 May 2017 23:00:24 +0200</lastBuildDate>
    <atom:link href="https://benetis.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s code: &#39;Advanced&#39; CRUD in Angular</title>
      <link>https://benetis.me/post/angular-advanced-crud/</link>
      <pubDate>Wed, 10 May 2017 23:00:24 +0200</pubDate>
      
      <guid>https://benetis.me/post/angular-advanced-crud/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;What does word advanced mean? It&amp;rsquo;s just that the CRUD application we are going to implement will have some additional features to what you might expect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import data&lt;/li&gt;
&lt;li&gt;save/load chunks data&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s code: Authentication in Angular #2 - Auth service</title>
      <link>https://benetis.me/post/angular-authentication-oauth/</link>
      <pubDate>Wed, 10 May 2017 23:00:24 +0200</pubDate>
      
      <guid>https://benetis.me/post/angular-authentication-oauth/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This is part two of &lt;strong&gt;Authentication in Angular&lt;/strong&gt; series. This one is about building authentication part to handle OAuth calls for us. You can find first post here: &lt;a href=&#34;https://benetis.me/post/angular-authentication/&#34;&gt;https://benetis.me/post/angular-authentication/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using redux with our angular project to help us handle side effects. &lt;a href=&#34;https://github.com/ngrx/store&#34;&gt;https://github.com/ngrx/store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our setup - angular-cli 1.0 + Angular4 (Angular 4.1)&lt;/p&gt;

&lt;h3 id=&#34;aims&#34;&gt;Aims&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After user clicks login - we need to call OAuth endpoint to get &lt;code&gt;access&lt;/code&gt; and &lt;code&gt;refresh&lt;/code&gt; tokens which we will store in local storage&lt;/li&gt;
&lt;li&gt;Show errors for user&lt;/li&gt;
&lt;li&gt;We want to store tokens in our redux store so they are easily accessible and can be added as headers to our api requests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;login&#34;&gt;Login&lt;/h3&gt;

&lt;p&gt;Ah, the login. Grabbing the access token with your username and password.&lt;/p&gt;

&lt;h4 id=&#34;security-concerns&#34;&gt;Security concerns&lt;/h4&gt;

&lt;p&gt;We are going to save that token in local storage. Although for security purposes it should end up in cookies with &lt;code&gt;httpOnly&lt;/code&gt; and &lt;code&gt;secure&lt;/code&gt; flags. It is all because of XSS. If javascript can access token - attacker can do that also. Read more here - &lt;a href=&#34;https://auth0.com/blog/cookies-vs-tokens-definitive-guide/&#34;&gt;https://auth0.com/blog/cookies-vs-tokens-definitive-guide/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;ngrx&#34;&gt;Ngrx&lt;/h4&gt;

&lt;p&gt;Creating folder named &lt;code&gt;classes&lt;/code&gt; under &lt;code&gt;app/&lt;/code&gt; to hold &lt;code&gt;auth.reducer, auth.effects and auth.actions&lt;/code&gt;. I keep reducers and actions close to the module they belong too, although effects need to be imported in root module.&lt;/p&gt;

&lt;p&gt;We will need two actions for login. One will be dispatched when user clicks login and another after we get response from server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;LOGIN: type(&#39;[Auth] Login&#39;),
LOGIN_COMPLETE: type(&#39;[Auth] Login complete&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just a basic skeleton for now, no business logic. We will come back in a sec.&lt;/p&gt;

&lt;h4 id=&#34;login-events&#34;&gt;Login events&lt;/h4&gt;

&lt;p&gt;Upon clicking login we will dispatch event and show response to the user. If error - we will display error message from response. (&lt;code&gt;either invalid username/password&lt;/code&gt; or &lt;code&gt;too many attempts&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;So from last blog we have this &lt;code&gt;login-form.component&lt;/code&gt;. Let&amp;rsquo;s update!&lt;/p&gt;

&lt;p&gt;I like to start from models. First let&amp;rsquo;s create interface of &amp;ldquo;LoginUser&amp;rdquo; and call it exactly that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not try to generalize User interface here. It will be hard to manage optional parameters. Just create few. Don&amp;rsquo;t be afraid to have &lt;code&gt;LoginUser&lt;/code&gt;, &lt;code&gt;RegisterUser&lt;/code&gt; and &lt;code&gt;ProfileUser&lt;/code&gt; interfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export interface LoginUser {
  email: string,
  password: string,
  grant_type: &#39;password&#39;, //We set type to password since its not going to change
  client_id: 1 //Same with client_id - it is not going to change. Prevent mistakes at compile time :^)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add variable to hold our login form variable state (info we will submit later)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;public user: LoginUser = {email: &#39;&#39;, password: &#39;&#39;, client_id: 1, grant_type: &#39;password&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;onSubmit&lt;/code&gt; function which is called when user clicks &lt;code&gt;Login&lt;/code&gt;. As said previously - it dispatches event to login which we will handle later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;public onSubmit() {
  this.store.dispatch(new auth.LoginAction({...this.user}))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;auth-client-part&#34;&gt;Auth client part&lt;/h3&gt;

&lt;p&gt;We have &lt;code&gt;api-client&lt;/code&gt; which handle all api requests to backend and we could add auth routes to it also. Instead - we will create new service just for auth. Reason being - OAuth2 which we are implementing has different responses from our usual api responses (following spec) and we want to isolate them&lt;/p&gt;

&lt;p&gt;p.s similar example of what api-client is: &lt;a href=&#34;https://github.com/ESNLithuania/boarded/blob/master/src/app/services/request.service.ts&#34;&gt;https://github.com/ESNLithuania/boarded/blob/master/src/app/services/request.service.ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically a service where we wrap our requests to manage them easier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth-client.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;public oauth(): { login: (LoginUser) =&amp;gt; Observable&amp;lt;Response&amp;gt; } {
  return {
    login: (loginUser) =&amp;gt; {
      return this
        .post(`oauth/access_token`, loginUser)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also it&amp;rsquo;s important to note that since responses are different - we need to handle errors differently. We grab error description from json response and just leave it for effect to handle.&lt;/p&gt;

&lt;p&gt;Handle error function taken from - &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/server-communication.html#!#error-handling&#34;&gt;https://angular.io/docs/ts/latest/guide/server-communication.html#!#error-handling&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;private post(url: string
  , objToPost: any): Observable&amp;lt;Response&amp;gt; {

  const headers = new Headers({&#39;Content-Type&#39;: &#39;application/json&#39;});
  const options = new RequestOptions({headers: headers});

  return this.http
    .post(this.url + url, objToPost, options)
    .map(this.extractData)
    .catch(this.handleError)
}

private extractData(res: Response) {
  const body = res.json();
  return body || {};
}

private handleError(error: Response | any) {
  const errMsg = error.json().error_description
  return Observable.throw(errMsg);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our effect for doing login looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;
constructor(private actions$: Actions
   , private authClient: AuthClientService) {
 }

 @Effect()
 loginUser$: Observable&amp;lt;Action&amp;gt; = this.actions$
   .ofType(auth.ActionTypes.LOGIN)
   .map(toPayload)
   .switchMap((payload: LoginUser) =&amp;gt; {
     return this
       .authClient
       .oauth()
       .login(payload)
       .map(res =&amp;gt; new auth.LoginCompleteAction())
       .catch(err =&amp;gt; of(new auth.LoginCompleteAction(err)))
   });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should get access token now after doing request in login form.&lt;/p&gt;

&lt;h3 id=&#34;handling-login-response&#34;&gt;Handling login response&lt;/h3&gt;

&lt;p&gt;Things to do with response:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error -&amp;gt; Show error in login form&lt;/li&gt;
&lt;li&gt;Indicate that request is happening&lt;/li&gt;
&lt;li&gt;Successful -&amp;gt; Put token in LocalStorage &amp;amp; Redirect&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;error-handling&#34;&gt;Error handling&lt;/h4&gt;

&lt;p&gt;For errors we can create another action: &lt;code&gt;LoginCompleteErrorAction&lt;/code&gt; to pass error response to reducer and subscribe to error messages for login form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export class LoginCompleteErrorAction implements Action {
  type = ActionTypes.LOGIN_COMPLETE_WITH_ERROR;

  constructor(public payload: string) {
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our &lt;code&gt;auth.reducer&lt;/code&gt; we will add few variables in state.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as login from &#39;./auth.actions&#39;;

export interface State {
  loginErrMsg: string;
  loginResponseAwaiting: boolean;
  loginSuccessful: boolean;
}

export const initialState: State = {
  loginErrMsg: &#39;&#39;,
  loginResponseAwaiting: false,
  loginSuccessful: false
};

export function reducer(state = initialState,
                        action: login.Actions): State {

  switch (action.type) {
    case login.ActionTypes.LOGIN: {
      return {
        ...state,
        loginResponseAwaiting: true
      }
    }
    case login.ActionTypes.LOGIN_COMPLETE_WITH_ERROR: {
      return {
        ...state,
        loginErrMsg: &amp;lt;string&amp;gt;action.payload,
        loginResponseAwaiting: false
      };
    }
    case login.ActionTypes.LOGIN_COMPLETE: {
      return {
        ...state,
        loginResponseAwaiting: false,
        loginSuccessful: true,
        loginErrMsg: &#39;&#39;
      };
    }
    default: {
      return state;
    }
  }
}

export const getLoginErrMsg = (state: State) =&amp;gt; state.loginErrMsg
export const getLoginResponseAwaiting = (state: State) =&amp;gt; state.loginResponseAwaiting
export const getLoginSuccessful = (state: State) =&amp;gt; state.loginSuccessful
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;login-form.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form *ngIf=&amp;quot;!(loginResponseAwaiting$ | async)&amp;quot;
      fxLayout=&amp;quot;column&amp;quot;
      #loginForm=&amp;quot;ngForm&amp;quot;
      (ngSubmit)=&amp;quot;onSubmit()&amp;quot;
&amp;gt;
    &amp;lt;anv-alert [active]=&amp;quot;errMsg.length &amp;gt; 0&amp;quot;&amp;gt;{{errMsg}}&amp;lt;/anv-alert&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;email&amp;quot;
               type=&amp;quot;email&amp;quot;
               [(ngModel)]=&amp;quot;user.username&amp;quot;
               required
               validEmail
               placeholder=&amp;quot;Email&amp;quot;&amp;gt;
        &amp;lt;md-error&amp;gt;Email is invalid&amp;lt;/md-error&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;password&amp;quot;
               type=&amp;quot;password&amp;quot;
               [(ngModel)]=&amp;quot;user.password&amp;quot;
               required
               placeholder=&amp;quot;Password&amp;quot;&amp;gt;
        &amp;lt;md-error&amp;gt;Needs to be at least 8 characters&amp;lt;/md-error&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;div fxFlex=&amp;quot;33&amp;quot;
         fxFlexAlign=&amp;quot;end&amp;quot;&amp;gt;
        &amp;lt;button md-raised-button
                type=&amp;quot;submit&amp;quot;
                [disabled]=&amp;quot;!loginForm.valid&amp;quot;
        &amp;gt;Login
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;div *ngIf=&amp;quot;loginResponseAwaiting$ | async&amp;quot;
     fxLayoutAlign=&amp;quot;center center&amp;quot;&amp;gt;
    &amp;lt;md-spinner mode=&amp;quot;indeterminate&amp;quot;&amp;gt;&amp;lt;/md-spinner&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;login-form.component&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Component({
  selector: &#39;anv-login-form&#39;,
  templateUrl: &#39;./login-form.component.html&#39;,
  styleUrls: [&#39;./login-form.component.scss&#39;]
})
export class LoginFormComponent implements OnInit, OnDestroy {

  public user: LoginUser = {username: &#39;&#39;, password: &#39;&#39;, client_id: 1, grant_type: &#39;password&#39;}

  public errMsg$: Observable&amp;lt;string&amp;gt;;
  public errMsg: string = &#39;&#39;;
  public loginResponseAwaiting$: Observable&amp;lt;boolean&amp;gt;;
  public loginSuccessful$: Observable&amp;lt;boolean&amp;gt;;

  private sub: any;

  constructor(private store: Store&amp;lt;fromRoot.State&amp;gt;) {
    this.loginResponseAwaiting$ = store.select(fromRoot.getLoginResponseAwaiting)
    this.errMsg$ = store.select(fromRoot.getLoginErrMsg)

    this.sub = this.errMsg$.subscribe(_ =&amp;gt; this.errMsg)

    this.loginSuccessful$ = store.select(fromRoot.getLoginSuccessful)
  }

  ngOnInit() {
  }

  public onSubmit() {
    this.store.dispatch(new auth.LoginAction({...this.user}))
  }

  ngOnDestroy() {
    this.sub.unsubscribe()
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/05/error-response.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Response handled. If error - shows it above login form. We can adjust that to our needs in effect or reducer. We also indicate request is happening by showing &lt;code&gt;&amp;lt;md-spinner&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;saving-token&#34;&gt;Saving token&lt;/h4&gt;

&lt;p&gt;Starting with action to set access token. After we set access token we will need to update our state to have newest token + put in local storage so it can be grabbed later. State update will happen in reducer, as for LocalStorage update - it is a side effect so we will put it in effects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export interface AuthInfo {
  access_token?: string,
  expires?: number,
  expires_in?: number
}

public static readonly tokenItem = &#39;token&#39;

@Effect()
loginComplete$: Observable&amp;lt;Action&amp;gt; = this.actions$
  .ofType(auth.ActionTypes.LOGIN_COMPLETE)
  .map(toPayload)
  .switchMap((payload) =&amp;gt; {

    if (payload) {
      const authInfoUpdated: AuthInfo = {
        ...payload,
        expires: payload.expires_in + Math.floor(Date.now() / 1000)
      }
      localStorage.setItem(AuthEffects.tokenItem, JSON.stringify(authInfoUpdated));
      return of(new auth.SetAuthInfoAction(authInfoUpdated))
    } else {
      return of(new auth.LogoutAction())
    }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/05/save-token.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;auth-guard&#34;&gt;Auth guard&lt;/h3&gt;

&lt;p&gt;Now that we have token saved in LocalStorage we can enable our AuthGuard. It will protect our routes and redirect unauthenticated user to login form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Injectable()
export class AuthGuard implements CanActivate {

  private loggedIn$: Observable&amp;lt;boolean&amp;gt;;

  constructor(private store: Store&amp;lt;fromRoot.State&amp;gt;
    , private router: Router) {

    this.loggedIn$ = store.select(fromRoot.getAuthLoggedIn)

  }

  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    this.store.dispatch(new auth.LoginCompleteAction(
      JSON.parse(
        localStorage.getItem(AuthEffects.tokenItem)
      )
    ))

    return this.loggedIn$.map(loggedIn =&amp;gt; {
      if (loggedIn) {
        return true;
      } else {
        this.router.navigate([&#39;/login&#39;]);
      }
    }).catch((err) =&amp;gt; {
      console.log(err)
      this.router.navigate([&#39;/login&#39;]);
      return Observable.of(false);
    }).first()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We subscribe to get if user is loggedIn (we set this state property to true when we set AuthInfo). Before that - we dispatch an action with our token from LocalStorage. We do this - so that user from email link or bookmark can directly access our application. Everything else is self explanatory.&lt;/p&gt;

&lt;p&gt;p.s redirect url needs to be saved - I propose for you to dispatch action to save it and redirect later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/05/auth-guard.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;There are few more things we need to do for auth to be finished. Logout to clean redux state + LocalStorage items, refresh token and minor tweaks, updates.&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s code: Authentication in Angular #1 - creating login form</title>
      <link>https://benetis.me/post/angular-authentication/</link>
      <pubDate>Mon, 24 Apr 2017 19:40:24 +0200</pubDate>
      
      <guid>https://benetis.me/post/angular-authentication/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Login form - a gate though which user logs into application. If it is working well - you don&amp;rsquo;t notice it - if it is bad - it will always annoy you. Of course it is not only UX/UI problem - there are security implications on server side also. But we will keep these concerns beyond this post scope.&lt;/p&gt;

&lt;p&gt;We will have few blog posts on authenticating Angular application. This one will focus on login form. Before diving into login form we will outline what we in a whole for authentication&lt;/p&gt;

&lt;p&gt;The project to which we will add login form is a side project of mine. (anvilium.com)&lt;/p&gt;

&lt;p&gt;Versions: using latest angular-cli (1.0.0) with angular4(4.0.2)&lt;/p&gt;

&lt;h3 id=&#34;plan-for-authentication&#34;&gt;Plan for authentication&lt;/h3&gt;

&lt;p&gt;What we need for authentication to work:&lt;/p&gt;

&lt;p&gt;I will highlight the points which will be covered in this post.&lt;/p&gt;

&lt;p&gt;UX:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Our login page will consist of two tabs: login and registration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;For user to register we will only ask for email and password&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If user is not authenticated - redirect him to login page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It should be easy to switch between login/register tabs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;After registering - user needs to click on activation link in email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technical:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If user has expired token - try refreshing it (OAuth)&lt;/li&gt;
&lt;li&gt;If user has no token or refresh token failed - redirect him to login page (OAuth)&lt;/li&gt;
&lt;li&gt;We need to limit login attempts (server only)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Password strength - at least 8 symbols&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User should activate new account in 24 hours before it expires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a great post on logins written by Jeff Atwood. We will use some ideas from that post in our login form. &lt;a href=&#34;https://blog.codinghorror.com/the-god-login/&#34;&gt;https://blog.codinghorror.com/the-god-login/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;login-form-plan&#34;&gt;Login form plan&lt;/h3&gt;

&lt;p&gt;Quick sketch before I dive into actual work. (Using draw.io)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/anvilium-login.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sorry for poor sketch, but ignoring that - this is how login screen should look. We will add some material look &amp;lsquo;n feel to it.&lt;/p&gt;

&lt;p&gt;Whole form is in middle of screen, centered. Register/Login are tabs which can be switched easily. Both of those tabs have two fields - &lt;em&gt;email&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt;. The only difference is button bellow them which indicates action that will performed. (Login, Register). Also after user clicks register - component will indicate to user that he has to click activate link in email.&lt;/p&gt;

&lt;p&gt;Code organization considerations: we will need to display login form instead of whole application - it means route for login will need to be at app level. Will create &lt;code&gt;LoginModule&lt;/code&gt; and eagerly load it in &lt;code&gt;app.module&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;setup-and-routing&#34;&gt;Setup and routing&lt;/h3&gt;

&lt;h5 id=&#34;setup&#34;&gt;Setup&lt;/h5&gt;

&lt;p&gt;First we will create new component in our shared module folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd src/app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g module login&lt;/code&gt; Using angular-cli scaffolding we will create &lt;code&gt;LoginModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g component login&lt;/code&gt; This will create login component with all needed files and add it to &lt;code&gt;LoginModule&lt;/code&gt; declarations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t forget to include &lt;code&gt;LoginModule&lt;/code&gt; into &lt;code&gt;AppModule&lt;/code&gt; imports&lt;/p&gt;

&lt;h5 id=&#34;routing-for-app&#34;&gt;Routing for app&lt;/h5&gt;

&lt;p&gt;Currently our application is routed with navigation menu stuck in one place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/route-changing.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This means we will need to add another &lt;code&gt;router-outlet&lt;/code&gt; for app itself and login page&lt;/p&gt;

&lt;p&gt;We will move our &lt;code&gt;app.component&lt;/code&gt; template to &lt;code&gt;content-main&lt;/code&gt; (new component) and instead put &lt;code&gt;router-outlet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can read more about child route configuration here - &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/router.html#!#child-route-config&#34;&gt;https://angular.io/docs/ts/latest/guide/router.html#!#child-route-config&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving on. Updating &lt;code&gt;app.routing&lt;/code&gt;. Moving other routes to &lt;code&gt;path: &#39;&#39;&lt;/code&gt; and adding routes as children since they are going to be routed from &lt;code&gt;content-main&lt;/code&gt; &lt;code&gt;router-outlet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LoginModule&lt;/code&gt; routes will be kept near LoginModule and imported together with module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export const appRoutes: Routes = [
  {
    path: &#39;&#39;,
    pathMatch: &#39;full&#39;,
    redirectTo: &#39;dashboard&#39;
  },
  { path: &#39;&#39;,
    component: ContentMainComponent,
    children: [
      {
        path: &#39;dashboard&#39;,
        loadChildren: &#39;app/+dashboard/dashboard.module#DashboardModule&#39;,
      },
      {
        path: &#39;reviews&#39;,
        loadChildren: &#39;app/+reviews/reviews.module#ReviewsModule&#39;,
      },
      {
        path: &#39;statistics&#39;,
        loadChildren: &#39;app/+statistics/statistics.module#StatisticsModule&#39;,
      },
    ]
  },
  // { path: &#39;**&#39;, component: PageNotFoundComponent }
];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/login-route-without-nav.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;routing-for-login-and-registration&#34;&gt;Routing for login and registration&lt;/h5&gt;

&lt;p&gt;As discussed, we will have two routes in our login. One will be for login and another for registration. We could not include these into actual web routes - but doing so will let users to bookmark/send links to our application login/registration forms.&lt;/p&gt;

&lt;p&gt;First, dummy components for &lt;code&gt;LoginForm&lt;/code&gt; and &lt;code&gt;RegistrationForm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;LoginModule&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng g component login-form&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng g component registration-form&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;login.component.html&lt;/code&gt; we will need to add &lt;code&gt;router-outlet&lt;/code&gt; to change our forms in this module level.&lt;/p&gt;

&lt;p&gt;Next, creating &lt;code&gt;login.routing.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export const loginRoutes: Routes = [
  {
    path: &#39;login&#39;,
    component: LoginComponent,
    children: [
      {
        path: &#39;login&#39;,
        component: LoginFormComponent,
      },
      {
        path: &#39;register&#39;,
        component: RegistrationFormComponent
      }
    ]
  },

]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in &lt;code&gt;LoginModule&lt;/code&gt; imports we will add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;RouterModule.forChild(loginRoutes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/register-login-routes.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;presentation-layer&#34;&gt;Presentation &amp;ldquo;layer&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Next up - form itself. We can use quite a lot of material components here.&lt;/p&gt;

&lt;p&gt;First step: get those tabs working. MdTabs (Material tabs) can be easily put to use. Also we will MdCard to get that nice tile looking card.&lt;/p&gt;

&lt;p&gt;Import &lt;code&gt;MdTabsModule, MdCardModule&lt;/code&gt; and you are ready to go. Grabbing example from &lt;a href=&#34;https://material.angular.io/components/component/tabs&#34;&gt;https://material.angular.io/components/component/tabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we end up with this code for tabs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;login.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;login-container&amp;quot;
     fxLayout=&amp;quot;column&amp;quot;
     fxLayoutAlign=&amp;quot;center center&amp;quot;&amp;gt;
    &amp;lt;md-card&amp;gt;
    &amp;lt;nav md-tab-nav-bar&amp;gt;
        &amp;lt;a md-tab-link
           routerLink=&amp;quot;/login&amp;quot;
           routerLinkActive
           [routerLinkActiveOptions]=&amp;quot;{ exact: true }&amp;quot;
           #rlaLogin=&amp;quot;routerLinkActive&amp;quot;
           [active]=&amp;quot;rlaLogin.isActive&amp;quot;&amp;gt;
            Login
        &amp;lt;/a&amp;gt;
        &amp;lt;a md-tab-link
           routerLink=&amp;quot;register&amp;quot;
           routerLinkActive
           [routerLinkActiveOptions]=&amp;quot;{ exact: true }&amp;quot;
           #rlaRegister=&amp;quot;routerLinkActive&amp;quot;
           [active]=&amp;quot;rlaRegister.isActive&amp;quot;
        &amp;gt;
            Register
        &amp;lt;/a&amp;gt;
    &amp;lt;/nav&amp;gt;
    &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
    &amp;lt;/md-card&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two tabs with routerLinkActive to select which one of them is active. &lt;code&gt;exact: true&lt;/code&gt; is needed to selected subroute &lt;code&gt;/login/register&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And a little bit of flex-layout magic to center things out&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/md-tabs-route.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;inputs&#34;&gt;Inputs&lt;/h5&gt;

&lt;p&gt;Adding few MdInput does the magic&lt;/p&gt;

&lt;p&gt;&lt;code&gt;login-form.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form fxLayout=&amp;quot;column&amp;quot;&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;email&amp;quot;
               type=&amp;quot;email&amp;quot;
               [(ngModel)]=&amp;quot;email&amp;quot;
               required
               placeholder=&amp;quot;Email&amp;quot;&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;password&amp;quot;
               type=&amp;quot;password&amp;quot;
               [(ngModel)]=&amp;quot;password&amp;quot;
               required
               placeholder=&amp;quot;Password&amp;quot;&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;div fxFlex=&amp;quot;33&amp;quot; fxFlexAlign=&amp;quot;end&amp;quot;&amp;gt;
        &amp;lt;button md-raised-button&amp;gt;Login&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/04/form-inputs.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We only check if field is filled but we don&amp;rsquo;t validate.&lt;/p&gt;

&lt;h5 id=&#34;validation&#34;&gt;Validation&lt;/h5&gt;

&lt;p&gt;We need to validate if email is &amp;ldquo;right&amp;rdquo; and check if passwords strength is OK. We defined requirement to be at least 8 symbols.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll skip custom validator creation - you can read on how to do that in angular docs. &lt;a href=&#34;https://angular.io/docs/ts/latest/cookbook/form-validation.html#!#custom-validation&#34;&gt;https://angular.io/docs/ts/latest/cookbook/form-validation.html#!#custom-validation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using material&amp;rsquo;s &lt;code&gt;&amp;lt;md-error&amp;gt;&lt;/code&gt; we simply define our validators on inputs and here we have all the stuff we need for them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;login-form.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form fxLayout=&amp;quot;column&amp;quot;&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;email&amp;quot;
               type=&amp;quot;email&amp;quot;
               [(ngModel)]=&amp;quot;email&amp;quot;
               required
               validEmail
               placeholder=&amp;quot;Email&amp;quot;&amp;gt;
        &amp;lt;md-error&amp;gt;Email is invalid&amp;lt;/md-error&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;md-input-container fxFlex=&amp;quot;100&amp;quot;&amp;gt;
        &amp;lt;input mdInput
               name=&amp;quot;password&amp;quot;
               type=&amp;quot;password&amp;quot;
               [(ngModel)]=&amp;quot;password&amp;quot;
               required
               minlength=&amp;quot;8&amp;quot;
               placeholder=&amp;quot;Password&amp;quot;&amp;gt;
        &amp;lt;md-error&amp;gt;Needs to be at least 8 characters&amp;lt;/md-error&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
    &amp;lt;div fxFlex=&amp;quot;33&amp;quot; fxFlexAlign=&amp;quot;end&amp;quot;&amp;gt;
        &amp;lt;button md-raised-button&amp;gt;Login&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we are done with login form.&lt;/p&gt;

&lt;h3 id=&#34;registration-form&#34;&gt;Registration form&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s simple. We just take what we have and change &amp;ldquo;Login&amp;rdquo; to &amp;ldquo;Register&amp;rdquo;. You might say duplication of code is bad, but I will argue that in this case its not worth to try to generalize. If our form gets more difficult - we can go ahead and refactor common parts.&lt;/p&gt;

&lt;p&gt;One thing to mention - we defined minimum password length on login form. We can delete that from login-form and leave it only on registration-form.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. We have fulfilled our requirements at the top. Until next time.&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to contact me. Waiting for your feedback!</title>
      <link>https://benetis.me/post/contact-me/</link>
      <pubDate>Sat, 22 Apr 2017 18:54:24 +0200</pubDate>
      
      <guid>https://benetis.me/post/contact-me/</guid>
      <description>

&lt;h2 id=&#34;contacts-and-feedback&#34;&gt;Contacts and feedback&lt;/h2&gt;

&lt;p&gt;Feedback is important for everyone. I am no exception. Ping me if something is off. Or you just want to say hi. You can email me at:
&lt;img src=&#34;https://benetis.me/images/2017/04/Screen Shot 2017-04-22 at 22.05.54.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another way to suggest changes to blog content is to open issue here. You can add: paragraphs, comments, fixes, quotes - anything! Community contribution more than welcome. &lt;a href=&#34;https://github.com/benetis/benetis.me/issues&#34;&gt;https://github.com/benetis/benetis.me/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

&lt;p&gt;Zygimantas Benetis&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Becoming the one with flexbox: Intro to handling the monster</title>
      <link>https://benetis.me/post/taming-flexbox-intro-to-handling-the-monster-2/</link>
      <pubDate>Tue, 21 Feb 2017 21:43:46 +0200</pubDate>
      
      <guid>https://benetis.me/post/taming-flexbox-intro-to-handling-the-monster-2/</guid>
      <description>

&lt;h3 id=&#34;learn-more-about-it-but-why&#34;&gt;Learn more about it. But why?&lt;/h3&gt;

&lt;p&gt;Flexbox is becoming one of core concepts in CSS. Might as well get to know more about it. It&amp;rsquo;s always a good investment to know basics well.
We will keep this as short as possible. No unneeded content, pictures and etc. Reading whole post should give you basics of it.&lt;/p&gt;

&lt;h3 id=&#34;what-is-flexbox&#34;&gt;What is flexbox?&lt;/h3&gt;

&lt;p&gt;Also known as &amp;ldquo;Flexible box&amp;rdquo; is layout mode in CSS. Main purpose of it is to be predictable when coding responsive layouts [1].  Solves some of the major problems we have been complaining as web developers [2].&lt;/p&gt;

&lt;h3 id=&#34;flexbox-concepts&#34;&gt;Flexbox concepts&lt;/h3&gt;

&lt;p&gt;MDN has wrote this perfectly. Just read it slowly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The defining aspect of the flex layout is the ability to alter its items&amp;rsquo; width and/or height to best fit in the available space on any display device. A flex container expands items to fill available free space, or shrinks them to prevent overflow.&lt;/p&gt;

&lt;p&gt;The flexbox layout algorithm is direction-agnostic as opposed to the block layout, which is vertically-biased, or the inline layout, which is horizontally-biased.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;getting-into-flexbox&#34;&gt;Getting into flexbox&lt;/h3&gt;

&lt;h4 id=&#34;container-properties&#34;&gt;Container properties&lt;/h4&gt;

&lt;p&gt;Flexbox container has two main properties - main axis and cross axis&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screenshot_18_02_2017__20_49.png&#34; alt=&#34;flexbox&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Both of them go across the whole container.&lt;/p&gt;

&lt;h4 id=&#34;justify-content&#34;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;For moving items along main axis there is property called &lt;code&gt;justify-content&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Put items at start of main axis
&lt;code&gt;justify-content: flex-start;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Put items at end of main axis
&lt;code&gt;justify-content: flex-end;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Put items at center of main axis
&lt;code&gt;justify-content: center;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Distribute evenly, but first and last items are at beginning and end
&lt;code&gt;justify-content: space-between;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great - you are in a lot of power now. Just knowing these properties.&lt;/p&gt;

&lt;h4 id=&#34;ever-heard-of-flex-direction&#34;&gt;Ever heard of &lt;code&gt;flex-direction&lt;/code&gt;?&lt;/h4&gt;

&lt;p&gt;Remember how we talked that there are two axis? Main and cross? So with &lt;code&gt;flex-direction&lt;/code&gt; you can change which axis is main. As a bonus - you can also reverse that axis.&lt;/p&gt;

&lt;h3 id=&#34;align-items&#34;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;As you probably guessed or already know - this property is for playing with cross axis.&lt;/p&gt;

&lt;p&gt;Same as before:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Put items at start of main axis
&lt;code&gt;align-items: flex-start;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Put items at end of main axis
&lt;code&gt;align-items: flex-end;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Put items at center of main axis
&lt;code&gt;align-items: center;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stretch. Stretches the items to fit
&lt;code&gt;align-items: stretch&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Aligns to items baselines
&lt;code&gt;align-items: baseline&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;order&#34;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Want some element appear before another one? &lt;code&gt;order: number&lt;/code&gt; property is reporting for duty. You can specify it on flex-item. As a default - all flex-items start with &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;align-self&#34;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you are looking how to align one element on cross axis? Just use &lt;code&gt;align-self&lt;/code&gt;. Works with same values as &lt;code&gt;align-items&lt;/code&gt;, just applied to one item. Overrides &lt;code&gt;align-items&lt;/code&gt; behavior&lt;/p&gt;

&lt;h3 id=&#34;real-world-case&#34;&gt;Real world case&lt;/h3&gt;

&lt;h4 id=&#34;the-notorious-sticky-footer&#34;&gt;The notorious sticky footer&lt;/h4&gt;

&lt;p&gt;Ahh, the pain of developing it in CSS. You don&amp;rsquo;t its height and you want it to be responsive. And it is such a common case - its crazy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Negative margins (will never be perfect)&lt;/li&gt;
&lt;li&gt;JS layout resize (UI presentation using JS sucks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flexbox makes this thing possible without hacks. If you like to see how - read here &lt;a href=&#34;https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/&#34;&gt;https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More cases - you can find here - &lt;a href=&#34;https://philipwalton.github.io/solved-by-flexbox/demos&#34;&gt;https://philipwalton.github.io/solved-by-flexbox/demos&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;when-to-avoid-flexbox&#34;&gt;When to avoid flexbox&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you can use CSS grids - avoid using flexbox for page layouts. Flexbox depends on its content which means using it for grids can be unpredictable [3] + performance&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use it everywhere. There are other CSS properties that might fit better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;browser-support&#34;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Supported in major browsers + two versions back. Unless you specifically have to support old ones - no reason why you should hold back from using it.&lt;/p&gt;

&lt;p&gt;Up to date link - &lt;a href=&#34;http://caniuse.com/#feat=flexbox&#34;&gt;caniuse.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-15-at-07.55.58.png&#34; alt=&#34;Browser support table&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;learn-more&#34;&gt;Learn more&lt;/h3&gt;

&lt;p&gt;A cool tutorial/game which introduces and lets you practice flexbox as you go - &lt;a href=&#34;http://www.flexboxdefense.com&#34;&gt;flexboxdefense.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;

&lt;p&gt;[1] - &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] - &lt;a href=&#34;https://philipwalton.github.io/solved-by-flexbox/&#34;&gt;https://philipwalton.github.io/solved-by-flexbox/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] - &lt;a href=&#34;https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/&#34;&gt;https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating shopping cart with product list in Angular2</title>
      <link>https://benetis.me/post/creating-shopping-cart-with-product-list-in-angular2/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/creating-shopping-cart-with-product-list-in-angular2/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;A common scenario - you want a product list with &amp;ldquo;Add to cart&amp;rdquo; functionality. Angular can do that - let&amp;rsquo;s see how effective it is.&lt;/p&gt;

&lt;p&gt;You can find code in this repository - &lt;a href=&#34;https://github.com/benetis/didactic-computing-machine/tree/master/ng/small-commercial-spa&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Product list with images&lt;/strong&gt;, color filter, names and currency. We want to create something similar that H&amp;amp;M has.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Details of item&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Shopping cart view&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To view the details and remove items from it. You can see an image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-11-at-11.16.27.png&#34; alt=&#34;http://i64.tinypic.com/v48aya.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-11-at-11.22.09.png&#34; alt=&#34;Shopping cart&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course we want everything to be responsive and made with Angular. We will skip unit tests.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-project&#34;&gt;Setting up the project&lt;/h3&gt;

&lt;p&gt;Angular CLI seems mature enough for our needs. Let&amp;rsquo;s install it globally.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g @angular/cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng new small-commercial-application&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;project-structure&#34;&gt;Project structure&lt;/h3&gt;

&lt;p&gt;Now for the project structure we want our routes to be lazy loaded. A convention is that lazy routed folders should start with &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can say that we will need two folders - for landing page and for cart page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-11-at-14.38.58.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also while we are at it - let&amp;rsquo;s create our routes file &lt;code&gt;app.routes.ts&lt;/code&gt; where we will define root module routes. We will make these routes &lt;em&gt;lazy&lt;/em&gt; a little bit later&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;
export const routes: Routes = [
  {
    path: &#39;&#39;,
    pathMatch: &#39;full&#39;,
    component: LandingComponent
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ignore the part where &lt;code&gt;LandingComponent&lt;/code&gt; is red. We will import it later.&lt;/p&gt;

&lt;p&gt;What is left for routes is to include them into our &lt;code&gt;app.module.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    LandingModule,
    RouterModule.forRoot(routes)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also will need to include &lt;code&gt;LandingModule&lt;/code&gt; for now since we directly load it on &lt;code&gt;/&lt;/code&gt;. Later we will change this.&lt;/p&gt;

&lt;h3 id=&#34;products-list&#34;&gt;Products list&lt;/h3&gt;

&lt;p&gt;I always like to start from the data. How will our data look?&lt;/p&gt;

&lt;p&gt;Each item will have some data and it can have multiple colors assigned to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export type ItemColor = &#39;blue&#39; | &#39;green&#39; | &#39;gray&#39;;

export interface Item {
  id?: number;
  name?: string;
  price?: number;
  currency?: string;
  colors?: ItemColor[];
  picture?: string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This interface should be a good starting point. &lt;code&gt;ItemColor&lt;/code&gt; defines available colors which can be assigned to product. Sure they can be dynamic, but let&amp;rsquo;s keep our scope limited&lt;/p&gt;

&lt;p&gt;Second, let&amp;rsquo;s think what kind of components we will need.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Item&lt;/strong&gt; which will represent a single product in a list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ItemList&lt;/strong&gt; which will represent list of Items in a list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Landing&lt;/strong&gt; which will hold our &lt;strong&gt;ItemList&lt;/strong&gt; and &lt;strong&gt;ItemFilter&lt;/strong&gt; components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For components creation we can utilise &lt;code&gt;Angular CLI&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd +landing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g component item&lt;/code&gt; //will generate component inside a folder. Suits us perfectly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g component item-list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;item-component&#34;&gt;Item component&lt;/h4&gt;

&lt;p&gt;Our &lt;code&gt;Item&lt;/code&gt; component will need to display an image. Instead of getting images from some json file (encoded) we will do it lazy way - just use icon of image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-11-at-15.02.26.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just a dumb component where all info is passed to it. Because of this we can utilise &lt;code&gt;ChangeDetection.OnPush&lt;/code&gt; which will increase our performance due to fact that it only needs to do changes when input data is changed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Component({
  selector: &#39;spa-item&#39;,
  templateUrl: &#39;./item.component.html&#39;,
  styleUrls: [&#39;./item.component.css&#39;],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ItemComponent {

  @Input() public id: number;
  @Input() public name: string;
  @Input() public price: number;
  @Input() public currency: string;

  public getCurrency(): string {
    return &#39;USD&#39;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;item.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;item-image&amp;quot;&amp;gt;
  &amp;lt;i class=&amp;quot;fa fa-picture-o fa-6&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;item-name&amp;quot;&amp;gt;{{name}}&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;item-price&amp;quot;&amp;gt;
  {{getCurrency()}}{{price}}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;item.component.css&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.item-image {
  font-size: 6em;
  color: lightgray;
}

.item-price {
  font-weight: bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;itemlist-component&#34;&gt;ItemList component&lt;/h4&gt;

&lt;p&gt;Okay - so we will want to overate a list of data and for each of the &amp;ldquo;row&amp;rdquo; display our &lt;code&gt;Item&lt;/code&gt;. Pretty simple we can achieve this using &lt;code&gt;ngFor&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;spa-item *ngFor=&amp;quot;let item of items&amp;quot;
          [name]=&amp;quot;item.name&amp;quot;
          [price]=&amp;quot;item.price&amp;quot;
          [currency]=&amp;quot;item.currency&amp;quot;
&amp;gt;&amp;lt;/spa-item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this moment this is how our application looks (with some mock data passed down from &lt;code&gt;Landing&lt;/code&gt; component)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen-Shot-2017-02-11-at-15.15.34.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Continuing - we want a grid view of our items. This is where &lt;code&gt;flexbox&lt;/code&gt; can help us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;updated list-item.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;list-items&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;list-item&amp;quot; *ngFor=&amp;quot;let item of items&amp;quot;&amp;gt;
    &amp;lt;spa-item
      [name]=&amp;quot;item.name&amp;quot;
      [price]=&amp;quot;item.price&amp;quot;
      [currency]=&amp;quot;item.currency&amp;quot;&amp;gt;
    &amp;lt;/spa-item&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;list-item.component.css&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.list-items {
  display: flex;

  justify-content: center;

  flex-flow: row wrap;
  align-content: flex-end;
}

.list-item {
  margin-left: 10px;
  margin-right: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Feb-11-2017-15-25-06.gif&#34; alt=&#34;resizing_browser_columns_wrap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aesthetically not the most pleasing look - but wrapping works as we expected. We can add more padding later.&lt;/p&gt;

&lt;h4 id=&#34;filters&#34;&gt;Filters&lt;/h4&gt;

&lt;p&gt;Each picture has a color assigned to it. What we want is to filter our items by such filter. This component is more complex than the others, because of it need to interact. Good rule to go by when filtering data - keep original data structures and just transform it as you go.&lt;/p&gt;

&lt;p&gt;As always let&amp;rsquo;s start with new component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng g component ItemFilter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;==Now we will want our &lt;code&gt;ItemList&lt;/code&gt; component to handle the actual data filtering. This this let us decouple logic early on and benefit us in the future. Especially if we will tie ngrx or similar store management into our application.==&lt;/p&gt;

&lt;p&gt;==So our &lt;code&gt;ItemFilter&lt;/code&gt; should only contain UI presentation logic of turning on/off, display filters. Not interaction with data.==&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item-filter.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from &#39;@angular/core&#39;;
import {ItemColor, ItemFilter} from &#39;../../classes/item&#39;;

@Co mponent({
  selector: &#39;spa-item-filters&#39;,
  templateUrl: &#39;./item-filter.component.html&#39;,
  styleUrls: [&#39;./item-filter.component.css&#39;],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ItemFilterComponent implements OnInit {

  @Input() availableFilters: ItemFilter[] = [];
  @Input() activatedFilters: ItemFilter[] = [];
  @Output() activeFilters: EventEmitter&amp;lt;ItemFilter[]&amp;gt; = new EventEmitter&amp;lt;ItemFilter[]&amp;gt;();

  constructor() {
  }

  ngOnInit() {
  }

  public filterColor(color: ItemColor): string {
    const colors = {
      &#39;blue&#39;: &#39;blue&#39;,
      &#39;green&#39;: &#39;green&#39;,
      &#39;gray&#39;: &#39;gray&#39;
    };
    return colors[color];
  }

  public filterActive(filter: ItemFilter): boolean {
    return this.activatedFilters.find(_ =&amp;gt; _.color === filter.color) != null;
  }

  public changeFilterStatus(filter: ItemFilter) {
    this.activeFilters.emit([filter]);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that we are getting active and available filters through inputs and outputting changed filters through outputs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item-filter.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;filter-list&amp;quot;&amp;gt;
  &amp;lt;div *ngFor=&amp;quot;let filter of availableFilters&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;filter-box&amp;quot;
         [ngStyle]=&amp;quot;{ &#39;background-color&#39;: filterColor(filter.color)}&amp;quot;
         [ngClass]=&amp;quot;{ &#39;filter-activated&#39;: filterActive(filter)}&amp;quot;
         (click)=&amp;quot;changeFilterStatus(filter)&amp;quot;
    &amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also utilise &lt;code&gt;ngStyle&lt;/code&gt; directive to set background color of filter. We do this for better maintainability in case we will want to make our filters dynamic.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item-filter.component.css&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.filter-box {
  width: 1em;
  height: 1em;
  margin: 0.2em;
}

.filter-list {
  display: flex;
  flex-direction: row-reverse;
}

.filter-activated {
  border: 3px red solid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for integration with &lt;code&gt;ItemList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item-list.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;list-filter&amp;quot;&amp;gt;
  &amp;lt;spa-item-filters
    [availableFilters]=&amp;quot;filters&amp;quot;
    [activatedFilters]=&amp;quot;activeFilters&amp;quot;
    (activeFilters)=&amp;quot;updateActivatedFilters($event)&amp;quot;
  &amp;gt;&amp;lt;/spa-item-filters&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;list-items&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;list-item&amp;quot; *ngFor=&amp;quot;let item of itemsAfterFilter()&amp;quot;&amp;gt;
    &amp;lt;spa-item
      [name]=&amp;quot;item.name&amp;quot;
      [price]=&amp;quot;item.price&amp;quot;
      [currency]=&amp;quot;item.currency&amp;quot;&amp;gt;
    &amp;lt;/spa-item&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We grab our items from the function &lt;code&gt;itemsAfterFilter()&lt;/code&gt; so we can filter the data according to active filters&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item-list.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {ChangeDetectionStrategy, Component, Input, OnInit} from &#39;@angular/core&#39;;
import {Item, ItemFilter} from &#39;../../classes/item&#39;;

@Component({
  selector: &#39;spa-item-list&#39;,
  templateUrl: &#39;./item-list.component.html&#39;,
  styleUrls: [&#39;./item-list.component.css&#39;],
  changeDetection: ChangeDetectionStrategy.OnPush

})
export class ItemListComponent implements OnInit {

  @Input() public items: Item[] = [];

  public readonly filters: ItemFilter[] = [
    &amp;lt;ItemFilter&amp;gt;{color: &#39;blue&#39;},
    &amp;lt;ItemFilter&amp;gt;{color: &#39;green&#39;},
    &amp;lt;ItemFilter&amp;gt;{color: &#39;gray&#39;},
  ];

  public activeFilters: ItemFilter[] = [];

  constructor() {
  }

  ngOnInit() {
  }

  public itemsAfterFilter(): Item[] {
    return this.items.filter((item: Item) =&amp;gt; {
      const matchesActiveFilter: boolean = this.activeFilters.reduce((prev, curr) =&amp;gt; {
        if (item.colors.includes(curr.color)) {
          return prev &amp;amp;&amp;amp; true;
        } else {
          return false;
        }
      }, true);

      return matchesActiveFilter;
    });
  }

  public updateActivatedFilters(filters: ItemFilter[]) {
    this.activeFilters = filters;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple filter function with a little more complex reduce function inside of it does the job perfectly. Should fit most cases and be easy to refactor.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how our application looks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Feb-11-2017-19-50-15.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;item-details&#34;&gt;Item details&lt;/h4&gt;

&lt;p&gt;Clicking on item name should take us to another page where it&amp;rsquo;s details and &amp;ldquo;Add to cart&amp;rdquo; button is displayed.&lt;/p&gt;

&lt;p&gt;Also at this point it makes sense to change &lt;code&gt;Item&lt;/code&gt; to &lt;code&gt;Product&lt;/code&gt; in our application just to avoid further confusion ahead. We don&amp;rsquo;t want our naming to be confusing us.&lt;/p&gt;

&lt;p&gt;Next - let&amp;rsquo;s extract our products mock data from component to a separate service. Inject the service in app component. We are doing this so we can add another function to it which will return a specific product by id (which we will need for details).&lt;/p&gt;

&lt;p&gt;==Later in the post we will refactor this service to serve observable instead of plain arrays to reflect real world application better==&lt;/p&gt;

&lt;p&gt;&lt;code&gt;products.service.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Injectable} from &#39;@angular/core&#39;;
import {Product} from &#39;../classes/product&#39;;
@Injectable()
export class ProductsService {
  public getProducts(): Product[] {
    return this.products();
  }

  public getProduct(id: number): Product {
    return this
      .products()
      .find((item: Product) =&amp;gt; {
        return item.id === id;
      });
  }

  private products(): Product[] {
    return &amp;lt;Product[]&amp;gt;[
      &amp;lt;Product&amp;gt;{id: 1, name: &#39;Blue item&#39;, price: 123.09, colors: [&#39;blue&#39;]},
      &amp;lt;Product&amp;gt;{id: 2, name: &#39;Green and gray&#39;, price: 99.09, colors: [&#39;green&#39;, &#39;gray&#39;]},
      &amp;lt;Product&amp;gt;{id: 3, name: &#39;Green item&#39;, price: 99.09, colors: [&#39;green&#39;]},
      &amp;lt;Product&amp;gt;{id: 4, name: &#39;Blue and gray&#39;, price: 99.09, colors: [&#39;blue&#39;, &#39;gray&#39;]},
      &amp;lt;Product&amp;gt;{id: 5, name: &#39;Green and blue&#39;, price: 99.09, colors: [&#39;green&#39;, &#39;blue&#39;]},
      &amp;lt;Product&amp;gt;{id: 6, name: &#39;Green and blue&#39;, price: 99.09, colors: [&#39;green&#39;, &#39;blue&#39;]},
      &amp;lt;Product&amp;gt;{id: 7, name: &#39;Gray&#39;, price: 99.09, colors: [&#39;gray&#39;]},
      &amp;lt;Product&amp;gt;{id: 8, name: &#39;Blue&#39;, price: 99.09, colors: [&#39;blue&#39;]},
      &amp;lt;Product&amp;gt;{id: 9, name: &#39;All colors&#39;, price: 99.09, colors: [&#39;gray&#39;, &#39;blue&#39;, &#39;green&#39;]},
    ];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up - fixing the routes.&lt;/p&gt;

&lt;p&gt;Okay so first &lt;code&gt;app.routes.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Routes, RouterModule} from &#39;@angular/router&#39;;

export const routes: Routes = [
  {
    path: &#39;&#39;,
    pathMatch: &#39;full&#39;,
    redirectTo: &#39;products&#39;
  },
  {
    path: &#39;products&#39;,
    loadChildren: &#39;./+products/products.module#ProductsModule&#39;
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;products.routes.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Routes} from &#39;@angular/router&#39;;
import {ProductsComponent} from &#39;./products.component&#39;;
import {ItemDetailsComponent} from &#39;./components/product-details/product-details.component&#39;;

export const routes: Routes = [
  {
    path: &#39;&#39;,
    pathMatch: &#39;full&#39;,
    redirectTo: &#39;list&#39;
  },
  {
    path: &#39;list&#39;,
    component: ProductsComponent
  },
  {
    path: &#39;details/:id&#39;,
    component: ItemDetailsComponent
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s go through the code. In app routes we lazy load the products module. In products routes we display list as default routes and also route to catch details with &lt;code&gt;:id&lt;/code&gt;. So when user will click on item in products list - it will redirect to details page using that &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;product-details.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Component, OnDestroy, OnInit} from &#39;@angular/core&#39;;
import {ActivatedRoute} from &#39;@angular/router&#39;;
import {ProductsService} from &#39;../../../services/products.service&#39;;
import {Product} from &#39;../../../classes/product&#39;;

@Component({
  selector: &#39;spa-product-details&#39;,
  templateUrl: &#39;product-details.component.html&#39;,
  styleUrls: [&#39;product-details.component.css&#39;]
})
export class ItemDetailsComponent implements OnInit {
  public product: Product = {};

  constructor(private route: ActivatedRoute
    , private productsService: ProductsService) {
  }

  ngOnInit() {
    this.route.params.subscribe(params =&amp;gt; {
      const id = +params[&#39;id&#39;];
      this.product = this.productsService.getProduct(id);
    });
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subscribe to route and according to id - fetch the wanted product details. As for displaying them - let&amp;rsquo;s use the same Product component and add needed additional info.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;product-details.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;product-details&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;product&amp;quot;&amp;gt;
    &amp;lt;spa-product [name]=&amp;quot;product.name&amp;quot;
                 [size]=&amp;quot;&#39;3&#39;&amp;quot;
                 [price]=&amp;quot;product.price&amp;quot;
    &amp;gt;&amp;lt;/spa-product&amp;gt;
    &amp;lt;div class=&amp;quot;color-list&amp;quot;&amp;gt;
      &amp;lt;div *ngFor=&amp;quot;let color of product.colors&amp;quot;
           class=&amp;quot;color-box&amp;quot;
           [ngStyle]=&amp;quot;{&#39;background-color&#39;: color}&amp;quot;
      &amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side quest let&amp;rsquo;s add a back button.&lt;/p&gt;

&lt;p&gt;At top of the &lt;code&gt;product-details.component.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;nav-bar&amp;quot;&amp;gt;
  &amp;lt;a routerLink=&amp;quot;/&amp;quot;&amp;gt;Back&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep - that simple.&lt;/p&gt;

&lt;h3 id=&#34;shopping-cart&#34;&gt;Shopping Cart&lt;/h3&gt;

&lt;p&gt;Cart is a place where items will be placed. A good place to start is with cart service which can be injected into app and be utilised to keep track of what is in it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make use of &lt;code&gt;BehaviorSubject&lt;/code&gt;. It can be used in so many places that we can write a blog post of it own. As for now - think of it as &lt;code&gt;Subject&lt;/code&gt; which hold last value. So when we subscribe - we get what it holds.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cart.service.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Injectable} from &#39;@angular/core&#39;;
import {Product} from &#39;../classes/product&#39;;
import {BehaviorSubject, Observable, Subject, Subscriber} from &#39;rxjs&#39;;
import {of} from &#39;rxjs/observable/of&#39;;
@Injectable()
export class CartService {
  private itemsInCartSubject: BehaviorSubject&amp;lt;Product[]&amp;gt; = new BehaviorSubject([]);
  private itemsInCart: Product[] = [];

  constructor() {
    this.itemsInCartSubject.subscribe(_ =&amp;gt; this.itemsInCart = _);
  }

  public addToCart(item: Product) {
    this.itemsInCartSubject.next([...this.itemsInCart, item]);
  }

  public getItems(): Observable&amp;lt;Product[]&amp;gt; {
    return this.itemsInCartSubject;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We push new items to subject and let our application parts subscribe to it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shopping-cart-component.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Component, OnInit} from &#39;@angular/core&#39;;
import {CartService} from &#39;../../../services/cart.service&#39;;
import {Product} from &#39;../../../classes/product&#39;;
import {Observable} from &#39;rxjs&#39;;
import {of} from &#39;rxjs/observable/of&#39;;

@Component({
  selector: &#39;spa-shopping-cart&#39;,
  templateUrl: &#39;./shopping-cart.component.html&#39;,
  styleUrls: [&#39;./shopping-cart.component.css&#39;]
})
export class ShoppingCartComponent implements OnInit {

  public shoppingCartItems$: Observable&amp;lt;Product[]&amp;gt; = of([]);
  public shoppingCartItems: Product[] = [];

  constructor(private cartService: CartService) {
    this.shoppingCartItems$ = this
      .cartService
      .getItems();

    this.shoppingCartItems$.subscribe(_ =&amp;gt; this.shoppingCartItems = _);
  }

  ngOnInit() {
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this moment all added items can be visible to shopping cart. But what we are missing - is the cool feature of reactive programming - we don&amp;rsquo;t see how adding items reflects other application states (although it happens behind the curtains).&lt;/p&gt;

&lt;p&gt;We can show that by adding a number near shopping cart which indicates how many items we have in our cart. This way when we add new items that number will reflect our cart size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt; public shoppingCartItems$: Observable&amp;lt;Product[]&amp;gt;;

  constructor(public location: Location
  , private cartService: CartService) {

    this.shoppingCartItems$ = this
      .cartService
      .getItems();

    this.shoppingCartItems$.subscribe(_ =&amp;gt; _);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;i class=&amp;quot;fa fa-shopping-cart&amp;quot;&amp;gt;{{(shoppingCartItems$ | async).length}}&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how it looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Feb-12-2017-15-06-46.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Okay 3 major things are left:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total sum in shopping cart&lt;/li&gt;
&lt;li&gt;Delete button to remove item from shopping cart&lt;/li&gt;
&lt;li&gt;Items that are in shopping cart should be removed from product list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;total-sum-in-shopping-cart&#34;&gt;Total sum in shopping cart&lt;/h4&gt;

&lt;p&gt;This one is easy. Let&amp;rsquo;s add some magic of &lt;code&gt;RxJs&lt;/code&gt; in our &lt;code&gt;cart.service.ts&lt;/code&gt; and be done with it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public getTotalAmount(): Observable&amp;lt;number&amp;gt; {
    return this.itemsInCartSubject.map((items: Product[]) =&amp;gt; {
      return items.reduce((prev, curr: Product) =&amp;gt; {
        return prev + curr.price;
      }, 0);
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return us an Observable to which we can subscribe and get our total.&lt;/p&gt;

&lt;h4 id=&#34;delete-button-to-remove-items-from-shopping-cart&#34;&gt;Delete button to remove items from shopping cart&lt;/h4&gt;

&lt;p&gt;Again - just an additional function in &lt;code&gt;cart.service&lt;/code&gt; and button in shopping cart.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public removeFromCart(item: Product) {
    const currentItems = [...this.itemsInCart];
    const itemsWithoutRemoved = currentItems.filter(_ =&amp;gt; _.id !== item.id);
    this.itemsInCartSubject.next(itemsWithoutRemoved);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;adding-product-to-cart-removes-it-from-product-list&#34;&gt;Adding product to cart removes it from product list&lt;/h4&gt;

&lt;p&gt;This one is also pretty easy one since we have decoupled our app.&lt;/p&gt;

&lt;p&gt;Inject cart service into our products component. subscribe to our cart items and filter items passed to &lt;code&gt;ItemList&lt;/code&gt; to remove those we have added. Yep - that easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  this.cartService
      .getItems()
      .subscribe((items: Product[]) =&amp;gt; {
      // remove items that are in our cart
        const allItems = this.items;
        this.items = allItems.filter(_ =&amp;gt; {
          return !this.itemIsInCart(_, items);
        });
      });
  }

  private itemIsInCart(item: Product, cart: Product[]): boolean {
    return cart.find(_ =&amp;gt; _.id === item.id) != null;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a magical &lt;code&gt;this.router.navigateByUrl(&#39;/&#39;);&lt;/code&gt; to &lt;code&gt;addToCart&lt;/code&gt; function will redirect user back to products list when he has added an item.&lt;/p&gt;

&lt;p&gt;As we went by with tasks. I had to do a bit of refactoring due to changes in our application. For example products service function were transformed into observables to represent real world data. (We don&amp;rsquo;t know when it will come and form where)&lt;/p&gt;

&lt;p&gt;Ok let&amp;rsquo;s see how it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Feb-12-2017-19-04-41.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this moment we have few problems left:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No look n feel&lt;/li&gt;
&lt;li&gt;You cannot disable filters&lt;/li&gt;
&lt;li&gt;You cannot choose a color when you are adding an item to shopping bag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But IMHO that is enough for now.&lt;/p&gt;

&lt;p&gt;You can find code here - &lt;a href=&#34;https://github.com/benetis/didactic-computing-machine/tree/master/ng/small-commercial-spa&#34;&gt;https://github.com/benetis/didactic-computing-machine/tree/master/ng/small-commercial-spa
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 Canvas. Fundamentals</title>
      <link>https://benetis.me/post/html5-canvas-fundamentals/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/html5-canvas-fundamentals/</guid>
      <description>

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;Today I met HTML5 Canvas. Not in real world - but during one the exercises from &lt;a href=&#34;https://benetis.me/vanilla-javascript-challenge/&#34;&gt;Javascript30&lt;/a&gt;. What are those &amp;ldquo;canvas&amp;rdquo;?&lt;/p&gt;

&lt;h4 id=&#34;basics&#34;&gt;Basics&lt;/h4&gt;

&lt;p&gt;Canvas is a HTML element used to draw graphics on fly via Javascript - [0].
Main idea is that you have this rectangle box on the page without any content and you use javascript to draw stuff on it. You do drawing by interacting with context object not the actual canvas object. Example below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const canvas = document.querySelector(&#39;#myCanvas&#39;);
const ctx = canvas.getContext(&#39;2d&#39;);

ctx.moveTo(50,50);
ctx.lineTo(150,100);
ctx.stroke();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Outputs a simple line. You can check and experiment &lt;a href=&#34;http://www.w3schools.com/html/tryit.asp?filename=tryhtml5_canvas_tut_path&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;our-task-from-javascript30&#34;&gt;Our task from Javascript30&lt;/h5&gt;

&lt;p&gt;Create this simple drawing tool where you press mouse keys and it draws different color trail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First task - we want to take our canvas element and set its width and height to window size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;canvas id=&amp;quot;draw&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;800&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  const canvas = document.querySelector(&#39;#draw&#39;)
  const ctx = canvas.getContext(&#39;2d&#39;)


  canvas.width = window.innerWidth
  canvas.height = window.innerHeight

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we want to catch mouse event needed to paint our beautiful rainbow. The thing is - we only want to paint when mouse is clicked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  let drawing = false;

  function draw(e) {
      if(drawing) {
          console.log(e);
      }
  }

  canvas.addEventListener(&#39;mousemove&#39;, draw);
  canvas.addEventListener(&#39;mousedown&#39;, e =&amp;gt; drawing = true)
  canvas.addEventListener(&#39;mouseout&#39;, e =&amp;gt; drawing = false)
  canvas.addEventListener(&#39;mouseup&#39;, e =&amp;gt; drawing = false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add &lt;code&gt;mousemove&lt;/code&gt; listener to call draw function on each mouse movement, but we check if &lt;code&gt;drawing&lt;/code&gt; variables is true. Variable is to to true when &lt;code&gt;mousedown&lt;/code&gt; or &lt;code&gt;mouseout&lt;/code&gt; event happens. In draw function we &amp;lsquo;bounce&amp;rsquo; calls if &lt;code&gt;drawing&lt;/code&gt; is set to false&lt;/p&gt;

&lt;p&gt;Moving on. Drawing the actual line. We need the point FROM and point TO for line to appear. Let&amp;rsquo;s add a new object &lt;code&gt;drawFrom&lt;/code&gt; which will hold our point with x and y coordinates where we want our line to being&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    let drawFrom = {x: 0, y: 0}
    function draw(e) {
        if (drawing) {
            ctx.beginPath()
            ctx.moveTo(drawFrom.x, drawFrom.y)
            ctx.lineTo(e.offsetX, e.offsetY)
            ctx.stroke() //drawing wont happen until we call stroke
            drawFrom.x = e.offsetX //we update our point
            drawFrom.y = e.offsetY
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and of course when we click down we need to update our point as well&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    canvas.addEventListener(&#39;mousedown&#39;, e =&amp;gt; {
        drawing = true
        drawFrom.x = e.offsetX
        drawFrom.y = e.offsetY
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--1-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next step - hue rainbows.&lt;/p&gt;

&lt;p&gt;After setting canvas size let&amp;rsquo;s include basic styles for our stroke.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    ctx.lineWidth = 50
    ctx.lineJoin = &#39;round&#39; //makes our point round
    ctx.lineCap = &#39;round&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For hue rainbows - we can use and abuse HSL. More on HSL &lt;a href=&#34;https://css-tricks.com/yay-for-hsla/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding this line after &lt;code&gt;ctx.beginPath()&lt;/code&gt; will result in drawing gummy bear worms.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    ctx.strokeStyle = `hsl(${e.offsetX % 360}, 100%, 50%)`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--2-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want - you can adjust width and count hue differently like it is shown in challenge, but IMHO this is enough for understanding the very very basics of HTML5 canvas.&lt;/p&gt;

&lt;p&gt;Code is in github - &lt;a href=&#34;https://github.com/benetis/JavaScript30/blob/608928a47a6b1c6f54a9fa99118f5a3f6f605bdf/08%20-%20Fun%20with%20HTML5%20Canvas/index-START.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[0] - &lt;a href=&#34;http://www.w3schools.com/html/html5_canvas.asp&#34;&gt;http://www.w3schools.com/html/html5_canvas.asp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016-2017. Review and planning</title>
      <link>https://benetis.me/post/2016-2017-review-and-planning/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/2016-2017-review-and-planning/</guid>
      <description>

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;2016 was a great year for me - a little bit chaotic too. (If you didn&amp;rsquo;t know - I love chaos). Especially the first half. The important thing - learned a ton and enjoyed the year to the fullest.&lt;/p&gt;

&lt;h4 id=&#34;review-of-2016&#34;&gt;Review of 2016&lt;/h4&gt;

&lt;h5 id=&#34;first-half&#34;&gt;First half&lt;/h5&gt;

&lt;p&gt;First half of year I spent with the ESN (organisation I still volunteer in). Kinda miss the experience, but you know what they say - I am happy it happened. I like to remember every single person I got to meet during that time. &lt;em&gt;Feeling grateful to every single one of them for the experience&lt;/em&gt;. During that time I got to continue to level up leadership, communication skills. Thanks Viktorija and Ieva L. for opportunity. Special thanks goes to my mentor &lt;em&gt;Mindaugas V.&lt;/em&gt; for teaching on how to reflect and lead.&lt;/p&gt;

&lt;h5 id=&#34;second-half&#34;&gt;Second half&lt;/h5&gt;

&lt;p&gt;The other half of the year. Oh yes - that is when software engineering part happened. After a good pause of &amp;ldquo;real&amp;rdquo; engineering I though it was going to be harder to catch up. Turned out, few weeks and I was back at the game. After half a year of &amp;ldquo;pure&amp;rdquo; engineering I can say I am currently at best shape I ever was. Could have done more, but at the same time I can also say I was pretty lucky at meeting the right people. Analytical, estimations skills were completely missing from my vocabulary. Thanks to my team at work - now I know that I know nothing about them. Will need to learn more about them.&lt;/p&gt;

&lt;p&gt;Other achievements - I will say that starting a blog was quite a big one for me.
&amp;gt; I just need to learn to write&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what pushed me. And still keeping at it! As a side bonus - learning about keeping web in &amp;ldquo;production&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Starting work on side-project. A little to no progress - but I did start. Will write about it more in the future. From my point of view - also a step in right direction.&lt;/p&gt;

&lt;p&gt;Volunteering took quite a part too. Just this time instead of working as a president I was more like team lead. In other words - chairing IT committee for ESN Lithuania. Aside from other committee activities I focused on development and design of internal HR system. Could have done more in this area - but I&amp;rsquo;ll stick around and try to finish what I started.&lt;/p&gt;

&lt;p&gt;Real grateful for - my SO, Donata. Who supports me in everything I do. That is my secret for doing things instead of being lazy.&lt;/p&gt;

&lt;h5 id=&#34;regressions&#34;&gt;Regressions&lt;/h5&gt;

&lt;p&gt;Focusing so much on engineering, communication, leadership and other skills came with a cost. Health and fitness + learning new things about self-development. Health and fitness levels did go down the most. This is the biggest regression. As for self-dev - while I did keep reflecting on myself - I stopped learning new things.&lt;/p&gt;

&lt;h4 id=&#34;2017-master-plan&#34;&gt;2017 - Master plan&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Focus on health and fitness&lt;/em&gt;. Priority goal! Hope to achieve even better results than I achieved in 2014 Half 2 / 2015 Half 1. Vessel for brain is important - take care of it!&lt;/p&gt;

&lt;p&gt;Other goals?&lt;/p&gt;

&lt;p&gt;Instead of exploring new things I am planning to stick to things I started this year. I think I did enough &amp;ldquo;random&amp;rdquo; exploring past 7 years. All this exploring will have a clearer goal - become a better frontend engineer. From low level knowledge such as language constructs to high level analysis, communication. I actually expect this point of view have a positive impact on me. Due to prioritising on what is important today and what will be valuable in 10 years.&lt;/p&gt;

&lt;p&gt;Side project development - need expertise on how to take pet project to real world.&lt;/p&gt;

&lt;p&gt;Keeping up with blog. I think knowing how to write is important - that is my way of learning that.&lt;/p&gt;

&lt;p&gt;Catch up with learning about self development. Plan is to make a habit - already failed twice. This time I will I&amp;rsquo;ll start with checking why I need this - make clearer goal.&lt;/p&gt;

&lt;p&gt;Backups, security - at some point I want to do a checkup on my infrastructure for backing up and security.&lt;/p&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;Reflections are in place, a &amp;ldquo;guide&amp;rdquo; plan is ready - planning to enjoy every minute of 2017.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A quick view at CSS Variables (Custom properties)</title>
      <link>https://benetis.me/post/css-variables-custom-properties-a-short-glimpse-2/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/css-variables-custom-properties-a-short-glimpse-2/</guid>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;For quite some time we had variables in CSS with the help of SASS/LESS. Variables are useful, but they come with a drawback - you cannot use them in runtime. Well that time has ended - CSS variables are landing in new browsers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_12_18_at_21_02_47.png&#34; alt=&#34;can i use table for css variables&#34; /&gt;
[screen taken - 2016-12-20, you can view up to date table here &lt;a href=&#34;http://caniuse.com/#feat=css-variables&#34;&gt;here&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Caniuse table shows that major browsers aside Edge already support&lt;/p&gt;

&lt;h5 id=&#34;syntax&#34;&gt;Syntax&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --header-color: #06c;
}

#foo h1 {
  color: var(--header-color);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example taken from &lt;a href=&#34;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care&#34;&gt;[0]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Variables have two dashes &lt;code&gt;--my-var&lt;/code&gt; before them and you can choose a name for them of your liking. To use variables you will need to use &lt;code&gt;var&lt;/code&gt; keyword as in &lt;code&gt;var(--my-var)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Well you are probably thinking - damn that is one ugly syntax! Where is my &lt;code&gt;$foo?&lt;/code&gt; Well CSSWG wanted to leave this notation for some cool feature in futurre. More about it here &lt;a href=&#34;http://www.xanthir.com/blog/b4KT0&#34;&gt;[3]&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;behavior&#34;&gt;Behavior&lt;/h5&gt;

&lt;p&gt;You probably noticed &lt;code&gt;:root&lt;/code&gt; selector in the syntax example. It assigns our custom named property &lt;code&gt;--header-color&lt;/code&gt; to root element with value of &lt;code&gt;#06c&lt;/code&gt;. Our defined property will be inherited to the rest of document elements&lt;/p&gt;

&lt;h5 id=&#34;example&#34;&gt;Example&lt;/h5&gt;

&lt;p&gt;Taken from &lt;a href=&#34;https://benetis.me/vanilla-javascript-challenge/&#34;&gt;Javascript30 challenge&lt;/a&gt; challenge - CSS Custom properties with sliders example.&lt;/p&gt;

&lt;p&gt;Below you can see how moving a slider sets CSS property and CSS automatically reacts&lt;/p&gt;

&lt;p&gt;Setting CSS property with Javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.documentElement.style.setProperty(`--header-color`, `red`);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/3o6ZsSmLsROdCXMtws.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Working code example - &lt;a href=&#34;https://github.com/benetis/JavaScript30/blob/master/03%20-%20CSS%20Variables/index-START.html&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;more-use-cases&#34;&gt;More use cases&lt;/h5&gt;

&lt;h6 id=&#34;1&#34;&gt;1&lt;/h6&gt;

&lt;p&gt;Separating strings in internationalisation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root:lang(en) {--external-link: &amp;quot;external link&amp;quot;;}
:root:lang(de) {--external-link: &amp;quot;externer Link&amp;quot;;}

a[href^=&amp;quot;http&amp;quot;]::after {content: &amp;quot; (&amp;quot; var(--external-link) &amp;quot;)&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;taken from [2]&lt;/p&gt;

&lt;h6 id=&#34;2&#34;&gt;2&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;calc&lt;/code&gt; function can also be tied neatly&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;--one: calc(var(--two) + 20px);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;summarry&#34;&gt;Summarry&lt;/h5&gt;

&lt;p&gt;Custom properties are quite cool - although we cannot throw SASS/Less in favour of them because lack of support of other features - mixins, nesting. Browser support is also still behind. All in all, still an interesting thing to try out. I bet in year or two we will be using them daily&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[0] - &lt;a href=&#34;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care&#34;&gt;https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1] - &lt;a href=&#34;http://caniuse.com&#34;&gt;http://caniuse.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] - &lt;a href=&#34;https://www.w3.org/TR/css-variables/&#34;&gt;https://www.w3.org/TR/css-variables/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] - &lt;a href=&#34;http://www.xanthir.com/blog/b4KT0&#34;&gt;http://www.xanthir.com/blog/b4KT0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vanilla Javascript challenge</title>
      <link>https://benetis.me/post/vanilla-javascript-challenge/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/vanilla-javascript-challenge/</guid>
      <description>

&lt;h5 id=&#34;challenge&#34;&gt;Challenge&lt;/h5&gt;

&lt;p&gt;Today while reading dev news I came across a 30 days Vanilla JS challenge. Idea is simple - there are 30 &amp;ldquo;tasks&amp;rdquo; you need to complete.  The catch? You cannot use any libraries, compilers (lodash, jquery, react, typescript, angular..). In other words - we can only use vanilla js.&lt;/p&gt;

&lt;p&gt;In my humble opinion this a great way to practice javascript. We are using tons of libraries, precompilers, postcompilers . This brings us to distance with the language itself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll pick up the glove and complete the challenge_&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://javascript30.com/&#34;&gt;Javascript30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wesbos/JavaScript30&#34;&gt;Javascript30 start files&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s code: Learning Haskell #1</title>
      <link>https://benetis.me/post/lets-code-learning-haskell-1/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/lets-code-learning-haskell-1/</guid>
      <description>

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;Last week has been very immutable for me. I was looking into redux, Elm, React - just the ideas and trying to implement something similar for Angular.&lt;/p&gt;

&lt;p&gt;For few years I have had a keen interest into functional programming and considered myself a good in the field. You know - using higher order functions, understand why &lt;code&gt;null&lt;/code&gt; is evil - so code produced by me was &amp;ldquo;fairly&amp;rdquo; functional. Avoiding state, writing functions as pure as possible. During the last year I upgraded my level to good novice by learning concepts of partials functions, functors. What is the next step? Tackle the real beast - learn the &lt;em&gt;haskell&lt;/em&gt;. Baby steps.&lt;/p&gt;

&lt;h4 id=&#34;exercises&#34;&gt;Exercises&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s start with Project Euler and go problem by problem googling haskell syntax and semantics on our way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem #1&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s go step by step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;take first 1000 of natural numbers  &lt;code&gt;[1..999]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;filter the list to only have multiples of &lt;code&gt;3&lt;/code&gt; or &lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;disibleByThreeOrFive n =
    if n `mod` 3 == 0 || n `mod` 5 == 0 then
        True
    else
        False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;filter disibleByThreeOrFive [1..999]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which returns a list of all numbers we need to sum&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fold and sum them
&lt;code&gt;haskell
foldl (\res prev -&amp;gt; res + prev) 0 (filter disibleByThreeOrFive [1..999])
&lt;/code&gt;
which returns &lt;code&gt;233168&lt;/code&gt;. It is accepted by euler website - but the code we wrote could be improved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let&amp;rsquo;s get replace &lt;code&gt;foldl&lt;/code&gt; with &lt;code&gt;sum&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;sum (filter disibleByThreeOrFive [1..999])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay - those brackets are still there - good for us there is &lt;code&gt;$&lt;/code&gt; operator which is exactly for that - getting rid of them. Anything that comes after dollar sign will take precedence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;sum $ filter disibleByThreeOrFive [1..999]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Making it a one liner by extracting to lambda function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;sum $
      filter
       (\x -&amp;gt; x `mod` 3 == 0
       || x `mod` 5 == 0)
       [1..999]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;Remembered a little bit of haskell syntax, tackled the new editor plugin change and looking forward to doing more exercises.&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 is cool. So is Typescript</title>
      <link>https://benetis.me/post/angular2-is-cool-so-is-typescript/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/angular2-is-cool-so-is-typescript/</guid>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;Angular framework for building applications. Let&amp;rsquo;s do a review over its important parts.&lt;/p&gt;

&lt;h6 id=&#34;language-of-choice-typescript&#34;&gt;Language of choice - Typescript&lt;/h6&gt;

&lt;p&gt;Angular was written in Typescript. As for Dart - Typescript was easily transpiled to Dart and that is how Dart version was maintained. It&amp;rsquo;s just that Typescript code required some things for Dart version to work. At some point (this summer) - Angular team decided to split Angular Dart project to a separate one for better or worse. Motivation was to have better typescript version (performance, unnecessary code..) and more idiomatic Dart version.&lt;/p&gt;

&lt;p&gt;Now for development - its a different story. You can use use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure Javascript (ES5)&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;ES2015* (lack of docs -&amp;gt; horror, no AOT support)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All there choices have separate Angular documentations - but as you can expect - Typescript&amp;rsquo;s version is the best. If you are considering the language - &lt;em&gt;just go with Typescript&lt;/em&gt; unless you have some really specific needs.&lt;/p&gt;

&lt;h5 id=&#34;typescript-what-is-so-great-about-it&#34;&gt;Typescript - what is so great about it?&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;It is a superset of ES2015 javascript&lt;/em&gt;. Which means it will adapt to its specs and evolve to match javascript. It will not be a completely separate language but rather an extension of it. And since we are still running javascript in the browser (and getting runtime errors) - this is nice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It has optional types&lt;/em&gt; - this makes migrating from JS to Typescript easy - non-existing - raw JS just works. However, this also enables you to skip writing types whenever you want - which means on lazy day you will just say &amp;ldquo;meh, I won&amp;rsquo;t need them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Refactoring and IntelliSense&lt;/em&gt; - Oh yes. This is one of the best things. You decide to change something for let&amp;rsquo;s say naming consistency? No problem IDE will do job for you. Most of the thing IDE misses will still be reported by the compiler. Big codebase of Typescript - nothing to fear! - it can be refactored.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Type thinking&lt;/em&gt; - You can just about types when coding - makes everything so much easier!
&amp;gt; f(x) transforms my x to f(x) - while it sounds to simple - this new ability almost instantly made all code produced by me with less side effect&lt;/p&gt;

&lt;p&gt;taken from &lt;a href=&#34;http://benetis.me/quick-glimpse-at-world-of-elm/&#34;&gt;http://benetis.me/quick-glimpse-at-world-of-elm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Language features&lt;/em&gt; - classes, interfaces, type switching, strict null checks, encapsulation(sort of)&amp;hellip; And so many more are coming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Raw Javascript just works&lt;/em&gt; - As mentioned above - you can compile any JS using the compiler and it will just work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Community is big&lt;/em&gt; - you won&amp;rsquo;t be solving problems alone. Typescript is popular and I am confident you won&amp;rsquo;t have problems finding answers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why typescript? TLDR;&lt;/em&gt; - static typing is good&lt;/p&gt;

&lt;h5 id=&#34;angular-application-architecture-overview&#34;&gt;Angular application architecture overview&lt;/h5&gt;

&lt;p&gt;What kind of file structure, components tree, libraries and etc. you find in Angular project?&lt;/p&gt;

&lt;p&gt;First of all - The framework consists of several libraries, some of them core and some optional [0].&lt;/p&gt;

&lt;p&gt;In this diagram you can see main building blocks of Angular application&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/overview2.png&#34; alt=&#34;Angular2 architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For best explaining - refer to Angular documentation -
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/architecture.html&#34;&gt;https://angular.io/docs/ts/latest/guide/architecture.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TLDR; below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your UI components. Contain the needed UI logic, styles are encapsulated. You input the data and get events from them. This makes understanding and testing them easier.
They are main building blocks of your application.&lt;/p&gt;

&lt;p&gt;Code example #1&lt;/p&gt;

&lt;p&gt;This is how our slide component currently looks - has two inputs.&lt;/p&gt;

&lt;p&gt;slide.component.html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&amp;lt;div class=&amp;quot;slide&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;slide-title&amp;quot;&amp;gt;{{title}}&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;slide-content&amp;quot;&amp;gt;{{content}}&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how it is consumed in slides component. We pass both title and content as inputs of the component. We also have a button on which clicked next slide appears. We won&amp;rsquo;t go into detail - if you want to - you can view it here. (Also tests exist) &lt;a href=&#34;https://github.com/benetis/enview/tree/master/src/app/slides&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is important to note - you just pass data to slide component and that is the only way to communicate to that component. Another would be to receive an event from it. Components are separate units, which do their specific things. This is cool.&lt;/p&gt;

&lt;p&gt;slides.component.html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&amp;lt;ev-slide
  [title]=&amp;quot;slides[currentSlide].title&amp;quot;
  [content]=&amp;quot;slides[currentSlide].content&amp;quot;
&amp;gt;&amp;lt;/ev-slide&amp;gt;
&amp;lt;button class=&amp;quot;next-slide&amp;quot; (click)=&amp;quot;nextSlide()&amp;quot;&amp;gt;Next slide&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Group your components, directives, services into groups so called NgModules. Component can only belong to one module. And module can import/export components (sort of encapsulation). Good way to split your application code. Router makes it easy to lazy load modules whenever you want them.&lt;/p&gt;

&lt;p&gt;app.module.ts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@NgModule({
  declarations: [ //This is where our components are assigned to this module
    AppComponent,
    SlidesComponent,
    SlideComponent
  ],
  imports: [ //Other modules our module is going to use. Must be here if you want to use anything from them
    BrowserModule,
    FormsModule,
    HttpModule
  ],
  exports: [
    SlidesComponent,
    SlideComponent
  ], //Component which can be imported into other modules
  providers: [SlidesService], //Providers to inject
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services is the place where you your logic. It usually is a class with well defined purpose. (Tax calculator, logging, data fetching). Services can be injected into any component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_11_27_at_11_38_14.png&#34; alt=&#34;File structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see all component related files are sitting together. Styles, tests, logic. It is easy to find things you need and you won&amp;rsquo;t abandon your tests if they are so close to your code.&lt;/p&gt;

&lt;h5 id=&#34;handling-state&#34;&gt;Handling state&lt;/h5&gt;

&lt;p&gt;To handle the annoying problem of cache invalidation at this moment you seem to only have two ways. One is to adapt some version of flux (redux version ngrx/store is popular in Angular community) and another is to use RxJs features like behavior subject.&lt;/p&gt;

&lt;p&gt;As an example - in component you subscribe to &lt;code&gt;BehaviorSubject&lt;/code&gt; and in state service you pass observable stream to that subject. What this achieves us - current value is stored in subject - letting us do easy caching.&lt;/p&gt;

&lt;h5 id=&#34;router&#34;&gt;Router&lt;/h5&gt;

&lt;p&gt;Let me begin with saying - I like working with Angular router. It is declarative, has cool features like lazy loading, is flexible - yet simple to understand.&lt;/p&gt;

&lt;p&gt;Lazy loading - why it is relevant. &lt;em&gt;You just don&amp;rsquo;t want to ship your users code they won&amp;rsquo;t be using&lt;/em&gt;. And as application gets bigger - this becomes more and more important - and Angular router through modules lets to that easily.&lt;/p&gt;

&lt;h5 id=&#34;dependency-injection-di&#34;&gt;Dependency injection (DI)&lt;/h5&gt;

&lt;p&gt;DI is used everywhere. Providers are constantly injected into components. Angular makes it easy to do DI - because it is done through types (Typescript annotations). Also -  makes testing simple.&lt;/p&gt;

&lt;p&gt;An example how easily you can stub a service in a test is just below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_11_30_at_17_12_46.png&#34; alt=&#34;Testing DI&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;mobile-and-offline-friendly&#34;&gt;Mobile and offline friendly&lt;/h5&gt;

&lt;p&gt;To &amp;ldquo;convert&amp;rdquo; our application into mobile app - you can use NativeScript which is basically the same thing as React native is to react. This enables us to share application code between platforms.&lt;/p&gt;

&lt;p&gt;Ionic 2 - we can just build everything using HTML/JS/CSS and it will work on mobile. Layouts will not be using native components.&lt;/p&gt;

&lt;p&gt;Angular also brags that it will support touch events/ gestures of different devices&lt;/p&gt;

&lt;h5 id=&#34;aot-compilation&#34;&gt;AoT compilation&lt;/h5&gt;

&lt;p&gt;One of the best features of Angular is that it has a compiler which will build our code once and we won&amp;rsquo;t need the compiler again for it to work.&lt;/p&gt;

&lt;p&gt;This leaves us with few cool things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App is built once&lt;/li&gt;
&lt;li&gt;Faster rendering - no compiler time&lt;/li&gt;
&lt;li&gt;Smaller application size (no need to drag that &amp;ldquo;huge&amp;rdquo; compiler together)&lt;/li&gt;
&lt;li&gt;Template errors are caught at compile time&lt;/li&gt;
&lt;li&gt;Better security&lt;/li&gt;
&lt;li&gt;Tree shaking (dependency graph walking)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;angular-universal-server-side-rendering&#34;&gt;Angular Universal (Server side rendering)&lt;/h5&gt;

&lt;p&gt;Advertised as it just works with a few gotchas (not interacting with DOM directly)&lt;/p&gt;

&lt;p&gt;At the moment - &lt;a href=&#34;https://github.com/angular/universal&#34;&gt;https://github.com/angular/universal&lt;/a&gt; you can find .NET core and NodeJs examples.&lt;/p&gt;

&lt;p&gt;Angular team said there will be improvements during next six months (two months ago)&lt;/p&gt;

&lt;h5 id=&#34;angular-cli&#34;&gt;Angular-cli&lt;/h5&gt;

&lt;p&gt;Command line interface for Angular applications. Let&amp;rsquo;s you setup quick boilerplate, compile apps, run tests. Even generate components and etc. It is based on ember-cli. Main idea is to solve problem of complex configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/iamdevloper/status/787969734918668289&#34;&gt;https://twitter.com/iamdevloper/status/787969734918668289&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this moment - it is not flexible and is slow. Promises to make it faster at near future.&lt;/p&gt;

&lt;h5 id=&#34;community&#34;&gt;Community&lt;/h5&gt;

&lt;p&gt;Community is great. Although not that big that moment - but we already have some great tools (Augury, ngrx stuff..)&lt;/p&gt;

&lt;p&gt;There are also enough Stack overflow answer to live and develop. (Almost)&lt;/p&gt;

&lt;p&gt;Lots of info and talks during conferences about it.&lt;/p&gt;

&lt;p&gt;Seems like a case of Hype driven development, but I really doubt it will be abandoned - probably the opposite.
[](&lt;a href=&#34;https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.t3suy6t3h&#34;&gt;https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.t3suy6t3h&lt;/a&gt;)&lt;/p&gt;

&lt;h5 id=&#34;angular-3-0&#34;&gt;Angular 3.0&lt;/h5&gt;

&lt;p&gt;Angular versioning is stupid. They know it, we know it. As an example RC5 release introduced NgModules which is one of main building parts of application. Before that components had dependencies - you can imagine how much rewrite it introduced. Probably they were rushing to release 2.0 final ASAP since it has been developing for more than a year and rushed to RC too early. After that they got a lot of rant from developers who already had decent size applications written. With final release they adopted semantic versioning. Hoooraaaay! Anyway - changes to api (breaking) will only be introduced with major releases which should be every six months or so.&lt;/p&gt;

&lt;h5 id=&#34;bad-parts&#34;&gt;Bad parts&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Early stage - community is just learning - SO has answers, but not about best practices and etc.&lt;/li&gt;
&lt;li&gt;Bugs - they are decreasing rapidly but in more complicated components you are sure to find some comments saying this is workaround due to some issue&lt;/li&gt;
&lt;li&gt;Setting up is complicated (cli) - while angular-cli seems nice - for more complex applications you will want your own configuration. Oh and setting up project with Webpack and other cursewords is a nightmare&lt;/li&gt;
&lt;li&gt;Not Javascript oriented - has a lot of custom DSL (domain specific language)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;feedback&#34;&gt;Feedback&lt;/h6&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;sources&#34;&gt;Sources&lt;/h6&gt;

&lt;p&gt;[0] - &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/architecture.html&#34;&gt;https://angular.io/docs/ts/latest/guide/architecture.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use functions to your advantage</title>
      <link>https://benetis.me/post/use-functions-to-your-advantage/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/use-functions-to-your-advantage/</guid>
      <description>

&lt;h5 id=&#34;intro&#34;&gt;Intro&lt;/h5&gt;

&lt;p&gt;Looking on how to write better code? One way to do that would be to use functions more than variables. You want to define some variable which returns some data? Define it as a function!&lt;/p&gt;

&lt;h5 id=&#34;example&#34;&gt;Example&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s say we columns array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public columns: Array&amp;lt;Column&amp;gt; = [
      {
        title: &#39;Name&#39;,
        name: &#39;name&#39;,
        sort: &#39;desc&#39;,
        type: &#39;text&#39;
      },
      {
        title: &#39;Surname&#39;,
        name: &#39;surname&#39;,
        type: &#39;text&#39;
      },
      {
        title: &#39;Section&#39;,
        name: &#39;section&#39;,
        type: &#39;select&#39;,
        data: this.sections
      },
      {
        title: &#39;Role&#39;,
        name: &#39;role&#39;,
        type: &#39;select&#39;,
        data: this.roles
      }
  ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note on &lt;code&gt;data&lt;/code&gt; property. It binds to this.roles. But when does it do that? On initialisation. What if this.roles fills after some time (Promise is resolved) - well that would leave us with empty hands. (Or with &lt;code&gt;cannot read property name of undefined&lt;/code&gt; or similar result)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do a quick upgrade!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public columns(): Array&amp;lt;Column&amp;gt; {
    return [
      {
        title: &#39;Name&#39;,
        name: &#39;name&#39;,
        sort: &#39;desc&#39;,
        type: &#39;text&#39;
      },
      {
        title: &#39;Surname&#39;,
        name: &#39;surname&#39;,
        type: &#39;text&#39;
      },
      {
        title: &#39;Section&#39;,
        name: &#39;section&#39;,
        type: &#39;select&#39;,
        data: this.sections
      },
      {
        title: &#39;Role&#39;,
        name: &#39;role&#39;,
        type: &#39;select&#39;,
        data: this.roles
      }
    ];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What actually changed? We just declared a function which returns an array. Same as before? You will be surprised.&lt;/p&gt;

&lt;p&gt;Now if we call our function &lt;code&gt;columns()&lt;/code&gt; we get same thing we got before. It&amp;rsquo;s just that &lt;code&gt;data&lt;/code&gt; property will be assigned on call - so our snippet has already became &lt;em&gt;lazy&lt;/em&gt; - which is good enough for us.&lt;/p&gt;

&lt;p&gt;Now while this is not the best example since we are using &lt;code&gt;this.&lt;/code&gt; calls - there is a nice way to avoid that - but for sake of short post - let&amp;rsquo;s skip it for now.&lt;/p&gt;

&lt;h5 id=&#34;summary&#34;&gt;Summary&lt;/h5&gt;

&lt;p&gt;Pros of using functions more&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We calculate what we need on fly (lazy)&lt;/li&gt;
&lt;li&gt;Easier to refactor function to add new data transformations (explicit transformations)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s code: Creating functional table with Angular</title>
      <link>https://benetis.me/post/angular-table/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/angular-table/</guid>
      <description>

&lt;h5 id=&#34;offtopic&#34;&gt;Offtopic&lt;/h5&gt;

&lt;p&gt;Currently volunteering in organisation called &amp;ldquo;Erasmus student Network Lithuania&amp;rdquo;. Working with a team to develop internal HR system.&lt;/p&gt;

&lt;h5 id=&#34;intro&#34;&gt;Intro&lt;/h5&gt;

&lt;p&gt;Looking at the requirement - there is a need to display data. A list of users. And some actions which can be done with each of the user. Table is a good way to make data look good.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to design how could this table look.&lt;/p&gt;

&lt;h5 id=&#34;basic-requirements&#34;&gt;Basic requirements&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Table might need to display hundreds of records - pagination&lt;/li&gt;
&lt;li&gt;No need for selecting rows&lt;/li&gt;
&lt;li&gt;There will be action buttons in each row to interact with user&lt;/li&gt;
&lt;li&gt;Inline editing&lt;/li&gt;
&lt;li&gt;Should look nice (we don&amp;rsquo;t really care about design, just nice is enough)&lt;/li&gt;
&lt;li&gt;Filtering&lt;/li&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;attempt-1&#34;&gt;Attempt #1&lt;/h5&gt;

&lt;p&gt;Using bootstrap - just the markup with some &lt;code&gt;*ngFor&lt;/code&gt; magic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_11_06_at_17_06_50.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table class=&amp;quot;table table-striped table-hover&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;th&amp;gt;First Name&amp;lt;/th&amp;gt;
    &amp;lt;th&amp;gt;Surname&amp;lt;/th&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
  &amp;lt;tr *ngFor=&amp;quot;let user of users&amp;quot;
  &amp;gt;
    &amp;lt;td&amp;gt;{{user.name}}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{user.surname}}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{user.section}}&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is cool about this - just because of &lt;code&gt;table-striped&lt;/code&gt; class we get odd/even rows and because of &lt;code&gt;table-hover&lt;/code&gt; class rows have hover effect. While this is simple enough - we don&amp;rsquo;t have pagination, filtering and sorting - and this would require us put some real angular code. While using helpers from &lt;code&gt;ng-bootstrap&lt;/code&gt; like pagination could speed us up - but there should be a more complete solution just for the table.&lt;/p&gt;

&lt;h5 id=&#34;attempt-2&#34;&gt;Attempt #2&lt;/h5&gt;

&lt;p&gt;There are other more complete solutions to the table like: &lt;code&gt;angular2-data-table&lt;/code&gt; or &lt;code&gt;ng2-table&lt;/code&gt; - which has all the features we discussed earlier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular2-data-table&lt;/code&gt; looks like more successful project (and has more features), but I have already tried it out - so let&amp;rsquo;s go with &lt;code&gt;ng2-table&lt;/code&gt;.
&lt;em&gt;If you are choosing between those two - go with &lt;code&gt;angular2-data-table&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There is enough documentation of table to just copy and adjust the code to have a working example. It is just that in example it uses pagination of &lt;code&gt;ng2-bootstrap&lt;/code&gt;, while I am using &lt;code&gt;ng-bootstrap&lt;/code&gt;. For consistency sake I changed few lines and it works like a charm. Although the table itself could be transformed to component - we can skip this until we need another table.
You can check code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ESNLithuania/boarded/blob/401cd4ca9595417ea0eea58279476a370d7cb7ba/src/app/modules/dashboard/manage-users.component.html&#34;&gt;manage-users.component.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ESNLithuania/boarded/blob/401cd4ca9595417ea0eea58279476a370d7cb7ba/src/app/modules/dashboard/manage-users.component.ts&#34;&gt;manage-users.component.ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Table currently looks like this -&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_11_06_at_20_16_20.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check what requirements we fulfilled -&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Table might need to display hundreds of records - pagination&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; No need for selecting rows&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; There will be action buttons in each row to interact with user&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Each row will have inline editing&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Should look nice (we don&amp;rsquo;t really care about design, just nice is enough)&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Filtering&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there seems to be no good way to have inline-editing or buttons. After checking project code - it seems to be really old (using &lt;code&gt;[innerHtml]&lt;/code&gt;), without tests - probably abandoned.&lt;/p&gt;

&lt;h5 id=&#34;attempt-3&#34;&gt;Attempt #3&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s get rid of ng2-table. Use it&amp;rsquo;s API ideas and just implement simple functionality we need. No need to make it reusable.&lt;/p&gt;

&lt;h6 id=&#34;table-template&#34;&gt;Table template&lt;/h6&gt;

&lt;p&gt;Let&amp;rsquo;s bring back the good ol&amp;rsquo; bootstrap in attempt #1 one and few enhancements.&lt;/p&gt;

&lt;p&gt;First we want to have columns as an for easier sorting and etc. While we are at it - we can introduce interface Column just for better types.
Same idea with rows instead of users. Easier to manipulate later for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table class=&amp;quot;table table-striped table-hover&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;th *ngFor=&amp;quot;let column of columns&amp;quot;&amp;gt;{{column.title}}&amp;lt;/th&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
  &amp;lt;tr *ngFor=&amp;quot;let row of rows&amp;quot;
  &amp;gt;
    &amp;lt;td *ngFor=&amp;quot;let column of columns&amp;quot;&amp;gt;
      {{getData(row, column)}}
    &amp;lt;/td&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pagination works, table loads.&lt;/p&gt;

&lt;h6 id=&#34;filtering&#34;&gt;Filtering&lt;/h6&gt;

&lt;p&gt;We are now not depending on ng2-table anyyway, except its&amp;rsquo; API and documentation.&lt;/p&gt;

&lt;p&gt;We want our all fields filter to work to filter our rows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input *ngIf=&amp;quot;config.filtering&amp;quot;
           placeholder=&amp;quot;Filter all columns&amp;quot;
           [(ngModel)]=&amp;quot;config.filtering.filterString&amp;quot;
           class=&amp;quot;form-control&amp;quot;
           (keydown)=&amp;quot;onChangeTable(config)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changed the directive of ng2 table to &lt;code&gt;ngModel&lt;/code&gt; - to bind it to filtering string + custom change event - changed it to keypress and we have desired functionality. So far so good.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--3-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;sorting&#34;&gt;Sorting&lt;/h5&gt;

&lt;p&gt;From the api it seems that columns need to have &lt;code&gt;sort&lt;/code&gt; property which is either &lt;code&gt;&#39;desc&#39;, &#39;asc&#39;, &#39;&#39;(unsorted)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make it a little more cleaner by limiting string in our interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;interface Column {
  title: string,
  name: string,
  sort? : &#39;desc&#39; | &#39;asc&#39; | &#39;&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sorting function seems complicated -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public changeSort(data: any, config: any): any {
    if (!config.sorting) {
      return data;
    }
    let columns = this.config.sorting.columns || [];

    let columnName: string = void 0;
    let sort: string = void 0;

    for (let i = 0; i &amp;lt; columns.length; i++) {
      if (columns[i].sort !== &#39;&#39; &amp;amp;&amp;amp; columns[i].sort !== false) {
        columnName = columns[i].name;
        sort = columns[i].sort;
      }
    }

    if (!columnName) {
      return data;
    }

    // simple sorting
    return data.sort((previous: any, current: any) =&amp;gt; {
      if (previous[columnName] &amp;gt; current[columnName]) {
        return sort === &#39;desc&#39;
          ? -1
          : 1;
      } else if (previous[columnName] &amp;lt; current[columnName]) {
        return sort === &#39;asc&#39;
          ? -1
          : 1;
      }
      return 0;
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how can we make this more simple by keeping the functionality&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt; public changeSort(data: any, config: any): any {
    if (!config.sorting) {
      return data;
    }
    const columns = this.config.sorting.columns || [];

    const columnWithSort: Column = columns.find((column: Column) =&amp;gt; {
      /* Checking if sort prop exists and column needs to be sorted */
      if(column.hasOwnProperty(&#39;sort&#39;) &amp;amp;&amp;amp; column.sort !== &#39;&#39;) {
        return true;
      }
    });

    return data.sort((previous: any, current: any) =&amp;gt; {
      if (previous[columnWithSort.name] &amp;gt; current[columnWithSort.name]) {
        return columnWithSort.sort === &#39;desc&#39;
          ? -1
          : 1;
      } else if (previous[columnWithSort.name] &amp;lt; current[columnWithSort.name]) {
        return columnWithSort.sort === &#39;asc&#39;
          ? -1
          : 1;
      }
      return 0;
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sorting seems to be working - just that there are no events which trigger sorting. Now only works from initial config.&lt;/p&gt;

&lt;p&gt;What is needed - upon clicking on &lt;th&gt; it should sort that column showing icons needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;th *ngFor=&amp;quot;let column of columns&amp;quot; (click)=&amp;quot;sortByColumn(column)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Triggers the function the new function I just wrote - which updated the columns sorting&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public sortByColumn(columnToSort: Column) {
    const sorting: Array&amp;lt;Column&amp;gt; = Object.assign({}, this.config.sorting).columns;

    const sorted = sorting.map((column: Column) =&amp;gt; {
      if (columnToSort.name === column.name) {
        const newSort = column.sort === &#39;asc&#39;
          ? &#39;desc&#39;
          : &#39;asc&#39;;
        return Object.assign(column, {sort: newSort});
      } else {
        return Object.assign(column, {sort: &#39;&#39;});
      }
    });

    const config = Object.assign({}, this.config, {
      sorting: {columns: sorted}
    });
    this.onChangeTable(config);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All is left to add some icons to indicate currently sorted columns. Bootstrap 4 currently has this nice &amp;ldquo;TODO&amp;rdquo; in Icon fonts. Let&amp;rsquo;s go with font-awesome.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
      &amp;lt;i *ngIf=&amp;quot;columnSortWay(column) !== &#39;&#39;&amp;quot; class=&amp;quot;fa fa-sort-alpha-{{columnSortWay(column)}}&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;
      &amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks good! And changes on click.
&lt;img src=&#34;https://benetis.me/images/2017/02/Screen_Shot_2016_11_06_at_23_07_51.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;continuing&#34;&gt;Continuing&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s look at our requirements list.&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Table might need to display hundreds of records - pagination&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; No need for selecting rows&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; There will be action buttons in each row to interact with user&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Inline editing&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Should look nice (we don&amp;rsquo;t really care about design, just nice is enough)&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Filtering&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are at same position as before - its just that we have as much freedom as we want to upgrade our table!&lt;/p&gt;

&lt;h5 id=&#34;inline-editing&#34;&gt;Inline editing&lt;/h5&gt;

&lt;p&gt;Next we want inline editing. Users clicks edit icon - all fields become editable. Once user click out - they become static again and field is saved.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do it the simple way.&lt;/p&gt;

&lt;p&gt;Icon itself&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;      &amp;lt;i class=&amp;quot;fa fa-pencil-square row-icon&amp;quot;
         (click)=&amp;quot;editRow(i)&amp;quot;
      &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If to display input for editable row. For now let&amp;rsquo;s go with simple variable - we just need to keep number of row we are editing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div *ngIf=&amp;quot;editableRowNumber === i&amp;quot;&amp;gt;
        &amp;lt;input [ngModel]=&amp;quot;getData(row, column)&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div *ngIf=&amp;quot;editableRow !== i&amp;quot;&amp;gt;
        {{getData(row, column)}}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for this I am going to hell. Simple solution for editing cancellation?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  @HostListener(&#39;document:click&#39;, [&#39;$event.target&#39;])
  public onClick(targetElement: HTMLElement) {
    const tagsNotToInteractWith = [&#39;INPUT&#39;, &#39;I&#39;, &#39;TH&#39;];
    const interact = tagsNotToInteractWith.reduce((result, item) =&amp;gt; {
      return result &amp;amp;&amp;amp; targetElement.tagName != item;
    }, true);

    if(interact) {
      this.updateUser();
      this.editableRowNumber = -1;
    }

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep. Catching all clicks and checking if they are not th (sorting), input (all inputs we want to ignore) or i (icons, edit-icon). Basic version should work for now. &lt;em&gt;NOTE&lt;/em&gt; - we probably can do something smarter with ViewChild checking if it inside/outside of component, but we want to cancel in component also.&lt;/p&gt;

&lt;p&gt;Will make a good post in the future to refactor!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--4-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have the UI working for inline editing - what is left is saving the data.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do it a fast way (will definitely need refactor - but that is what love) -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  private editableRow: Array&amp;lt;any&amp;gt; = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  public updateEditableRowData(data: any, column: Column) {
    this.editableRow[column.name] = data;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        &amp;lt;input #input [value]=&amp;quot;getData(row, column)&amp;quot; (blur)=&amp;quot;updateEditableRowData(input.value, column)&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now UI is outputting the values we need and we have row number in component state.&lt;/p&gt;

&lt;p&gt;Lastly, let&amp;rsquo;s just merge old and new user data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  private updateUser() {
    if(this.editableRowNumber !== -1) {
      const originalUser = this.rows[this.editableRowNumber];
      const updatedUser = &amp;lt;User&amp;gt;Object.assign(originalUser, this.editableRow);
       this.userService
        .updateUser(updatedUser)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--5-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The way service is implemented I&amp;rsquo;ll leave for another post. However if you are interested you can check code here -
&lt;a href=&#34;https://github.com/ESNLithuania/boarded/blob/3f33924df738580cece1c32f9c4e13e50c732ec3/src/app/services/request.service.ts&#34;&gt;request.service.ts&lt;/a&gt;
&lt;a href=&#34;https://github.com/ESNLithuania/boarded/blob/3f33924df738580cece1c32f9c4e13e50c732ec3/src/app/services/user.service.ts&#34;&gt;user.service.ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we check our requirements list&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Table might need to display hundreds of records - pagination&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; No need for selecting rows&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; There will be action buttons in each row to interact with user&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Inline editing&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Should look nice (we don&amp;rsquo;t really care about design, just nice is enough)&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Filtering&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems we have filled all of them. All is left are some small tweaks.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick glimpse at world of Elm</title>
      <link>https://benetis.me/post/quick-glimpse-at-world-of-elm/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/post/quick-glimpse-at-world-of-elm/</guid>
      <description>

&lt;h5 id=&#34;intro&#34;&gt;Intro&lt;/h5&gt;

&lt;p&gt;Recently I have came across a thing called Elm. It is a functional programming language dedicated to frontend.&lt;/p&gt;

&lt;h5 id=&#34;about-language-itself&#34;&gt;About language itself&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Functional language&lt;/li&gt;
&lt;li&gt;You will not have to worry about state mutations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No runtime errors.&lt;/strong&gt; I&amp;rsquo;ll just leave that here&lt;/li&gt;
&lt;li&gt;Friendly and helpful community. Go to slack, try talking - not only you will get your answers - but community will make you feel part of it&lt;/li&gt;
&lt;li&gt;Simplicity. You have this simple architecture emerging from language itself. More about it here - &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;a-lot-to-gain-by-learning&#34;&gt;A lot to gain by learning&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Instant new brain power to think in Types while coding&lt;/strong&gt; -
&lt;em&gt;f(x) transforms my x to f(x)&lt;/em&gt; - while it sounds to simple - this new ability almost instantly made all code produced by me with less side&lt;/p&gt;

&lt;h5 id=&#34;trying-with-simple-app&#34;&gt;Trying with simple app&lt;/h5&gt;

&lt;p&gt;It has one purpose - show how old are you with millisecond accuracy. Imagine your age here - quite a kick to stop procrastinating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://benetis.me/images/2017/02/giphy--6-.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While coding - a part where I needed to get current time was more difficult since it involves something that cannot be gained in a pure way. Not enough documentation on this, however Slack community together with SO answers solved the issue.&lt;/p&gt;

&lt;p&gt;You can observe how Elm&amp;rsquo;s code looks here - &lt;a href=&#34;https://github.com/benetis/elm-birthday/blob/master/Main.elm&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;summary&#34;&gt;Summary&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Thinking in types makes development easier&lt;/li&gt;
&lt;li&gt;Coding frontend without runtime errors is relaxing&lt;/li&gt;
&lt;li&gt;Easy to understand architecture keeps things simple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elm is cool - try it!&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback&lt;/h3&gt;

&lt;p&gt;If you have any suggestions - I am eagerly waiting for feedback. &lt;a href=&#34;https://benetis.me/post/contact-me/&#34;&gt;https://benetis.me/post/contact-me/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>